:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/XRInterface.xml.

.. _class_XRInterface:

XRInterface
===========

**Inherits:** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`MobileVRInterface<class_MobileVRInterface>`, :ref:`OpenXRInterface<class_OpenXRInterface>`, :ref:`WebXRInterface<class_WebXRInterface>`, :ref:`XRInterfaceExtension<class_XRInterfaceExtension>`

Base class for an XR interface implementation.

Description
-----------

This class needs to be implemented to make an AR or VR platform available to Godot and these should be implemented as C++ modules or GDExtension modules. Part of the interface is exposed to GDScript so you can detect, enable and configure an AR or VR platform.

Interfaces should be written in such a way that simply enabling them will give us a working setup. You can query the available interfaces through :ref:`XRServer<class_XRServer>`.

Tutorials
---------

- :doc:`XR documentation index <../tutorials/xr/index>`

Properties
----------

+----------------------------------------------------+--------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                            | :ref:`ar_is_anchor_detection_enabled<class_XRInterface_property_ar_is_anchor_detection_enabled>` | ``false`` |
+----------------------------------------------------+--------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                            | :ref:`interface_is_primary<class_XRInterface_property_interface_is_primary>`                     | ``false`` |
+----------------------------------------------------+--------------------------------------------------------------------------------------------------+-----------+
| :ref:`PlayAreaMode<enum_XRInterface_PlayAreaMode>` | :ref:`xr_play_area_mode<class_XRInterface_property_xr_play_area_mode>`                           | ``0``     |
+----------------------------------------------------+--------------------------------------------------------------------------------------------------+-----------+

Methods
-------

+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                  | :ref:`get_camera_feed_id<class_XRInterface_method_get_camera_feed_id>` **(** **)**                                                                                                                                                                                                                                                      |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                  | :ref:`get_capabilities<class_XRInterface_method_get_capabilities>` **(** **)** |const|                                                                                                                                                                                                                                                  |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`StringName<class_StringName>`                    | :ref:`get_name<class_XRInterface_method_get_name>` **(** **)** |const|                                                                                                                                                                                                                                                                  |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PackedVector3Array<class_PackedVector3Array>`    | :ref:`get_play_area<class_XRInterface_method_get_play_area>` **(** **)** |const|                                                                                                                                                                                                                                                        |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                          | :ref:`get_render_target_size<class_XRInterface_method_get_render_target_size>` **(** **)**                                                                                                                                                                                                                                              |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`TrackingStatus<enum_XRInterface_TrackingStatus>` | :ref:`get_tracking_status<class_XRInterface_method_get_tracking_status>` **(** **)** |const|                                                                                                                                                                                                                                            |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                  | :ref:`get_view_count<class_XRInterface_method_get_view_count>` **(** **)**                                                                                                                                                                                                                                                              |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                | :ref:`initialize<class_XRInterface_method_initialize>` **(** **)**                                                                                                                                                                                                                                                                      |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                | :ref:`is_initialized<class_XRInterface_method_is_initialized>` **(** **)** |const|                                                                                                                                                                                                                                                      |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                | :ref:`set_play_area_mode<class_XRInterface_method_set_play_area_mode>` **(** :ref:`PlayAreaMode<enum_XRInterface_PlayAreaMode>` mode **)**                                                                                                                                                                                              |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                                | :ref:`supports_play_area_mode<class_XRInterface_method_supports_play_area_mode>` **(** :ref:`PlayAreaMode<enum_XRInterface_PlayAreaMode>` mode **)**                                                                                                                                                                                    |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                   | :ref:`trigger_haptic_pulse<class_XRInterface_method_trigger_haptic_pulse>` **(** :ref:`String<class_String>` action_name, :ref:`StringName<class_StringName>` tracker_name, :ref:`float<class_float>` frequency, :ref:`float<class_float>` amplitude, :ref:`float<class_float>` duration_sec, :ref:`float<class_float>` delay_sec **)** |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                   | :ref:`uninitialize<class_XRInterface_method_uninitialize>` **(** **)**                                                                                                                                                                                                                                                                  |
+--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_XRInterface_signal_play_area_changed:

- **play_area_changed** **(** :ref:`int<class_int>` mode **)**

Emitted when the play area is changed. This can be a result of the player resetting the boundary or entering a new play area, the player changing the play area mode, the world scale changing or the player resetting their headset orientation.

Enumerations
------------

.. _enum_XRInterface_Capabilities:

.. _class_XRInterface_constant_XR_NONE:

.. _class_XRInterface_constant_XR_MONO:

.. _class_XRInterface_constant_XR_STEREO:

.. _class_XRInterface_constant_XR_QUAD:

.. _class_XRInterface_constant_XR_VR:

.. _class_XRInterface_constant_XR_AR:

.. _class_XRInterface_constant_XR_EXTERNAL:

enum **Capabilities**:

- **XR_NONE** = **0** --- No XR capabilities.

- **XR_MONO** = **1** --- This interface can work with normal rendering output (non-HMD based AR).

- **XR_STEREO** = **2** --- This interface supports stereoscopic rendering.

- **XR_QUAD** = **4** --- This interface supports quad rendering (not yet supported by Godot).

- **XR_VR** = **8** --- this interface supports VR.

- **XR_AR** = **16** --- This interface supports AR (video background and real world tracking).

- **XR_EXTERNAL** = **32** --- This interface outputs to an external device. If the main viewport is used, the on screen output is an unmodified buffer of either the left or right eye (stretched if the viewport size is not changed to the same aspect ratio of :ref:`get_render_target_size<class_XRInterface_method_get_render_target_size>`). Using a separate viewport node frees up the main viewport for other purposes.

----

.. _enum_XRInterface_TrackingStatus:

.. _class_XRInterface_constant_XR_NORMAL_TRACKING:

.. _class_XRInterface_constant_XR_EXCESSIVE_MOTION:

.. _class_XRInterface_constant_XR_INSUFFICIENT_FEATURES:

.. _class_XRInterface_constant_XR_UNKNOWN_TRACKING:

.. _class_XRInterface_constant_XR_NOT_TRACKING:

enum **TrackingStatus**:

- **XR_NORMAL_TRACKING** = **0** --- Tracking is behaving as expected.

- **XR_EXCESSIVE_MOTION** = **1** --- Tracking is hindered by excessive motion (the player is moving faster than tracking can keep up).

- **XR_INSUFFICIENT_FEATURES** = **2** --- Tracking is hindered by insufficient features, it's too dark (for camera-based tracking), player is blocked, etc.

- **XR_UNKNOWN_TRACKING** = **3** --- We don't know the status of the tracking or this interface does not provide feedback.

- **XR_NOT_TRACKING** = **4** --- Tracking is not functional (camera not plugged in or obscured, lighthouses turned off, etc.).

----

.. _enum_XRInterface_PlayAreaMode:

.. _class_XRInterface_constant_XR_PLAY_AREA_UNKNOWN:

.. _class_XRInterface_constant_XR_PLAY_AREA_3DOF:

.. _class_XRInterface_constant_XR_PLAY_AREA_SITTING:

.. _class_XRInterface_constant_XR_PLAY_AREA_ROOMSCALE:

.. _class_XRInterface_constant_XR_PLAY_AREA_STAGE:

enum **PlayAreaMode**:

- **XR_PLAY_AREA_UNKNOWN** = **0** --- Play area mode not set or not available.

- **XR_PLAY_AREA_3DOF** = **1** --- Play area only supports orientation tracking, no positional tracking, area will center around player.

- **XR_PLAY_AREA_SITTING** = **2** --- Player is in seated position, limited positional tracking, fixed guardian around player.

- **XR_PLAY_AREA_ROOMSCALE** = **3** --- Player is free to move around, full positional tracking.

- **XR_PLAY_AREA_STAGE** = **4** --- Same as roomscale but origin point is fixed to the center of the physical space, XRServer.center_on_hmd disabled.

Property Descriptions
---------------------

.. _class_XRInterface_property_ar_is_anchor_detection_enabled:

- :ref:`bool<class_bool>` **ar_is_anchor_detection_enabled**

+-----------+----------------------------------------+
| *Default* | ``false``                              |
+-----------+----------------------------------------+
| *Setter*  | set_anchor_detection_is_enabled(value) |
+-----------+----------------------------------------+
| *Getter*  | get_anchor_detection_is_enabled()      |
+-----------+----------------------------------------+

On an AR interface, ``true`` if anchor detection is enabled.

----

.. _class_XRInterface_property_interface_is_primary:

- :ref:`bool<class_bool>` **interface_is_primary**

+-----------+--------------------+
| *Default* | ``false``          |
+-----------+--------------------+
| *Setter*  | set_primary(value) |
+-----------+--------------------+
| *Getter*  | is_primary()       |
+-----------+--------------------+

``true`` if this is the primary interface.

----

.. _class_XRInterface_property_xr_play_area_mode:

- :ref:`PlayAreaMode<enum_XRInterface_PlayAreaMode>` **xr_play_area_mode**

+-----------+---------------------------+
| *Default* | ``0``                     |
+-----------+---------------------------+
| *Setter*  | set_play_area_mode(value) |
+-----------+---------------------------+
| *Getter*  | get_play_area_mode()      |
+-----------+---------------------------+

The play area mode for this interface.

Method Descriptions
-------------------

.. _class_XRInterface_method_get_camera_feed_id:

- :ref:`int<class_int>` **get_camera_feed_id** **(** **)**

If this is an AR interface that requires displaying a camera feed as the background, this method returns the feed ID in the :ref:`CameraServer<class_CameraServer>` for this interface.

----

.. _class_XRInterface_method_get_capabilities:

- :ref:`int<class_int>` **get_capabilities** **(** **)** |const|

Returns a combination of :ref:`Capabilities<enum_XRInterface_Capabilities>` flags providing information about the capabilities of this interface.

----

.. _class_XRInterface_method_get_name:

- :ref:`StringName<class_StringName>` **get_name** **(** **)** |const|

Returns the name of this interface (OpenXR, OpenVR, OpenHMD, ARKit, etc).

----

.. _class_XRInterface_method_get_play_area:

- :ref:`PackedVector3Array<class_PackedVector3Array>` **get_play_area** **(** **)** |const|

Returns an array of vectors that denotes the physical play area mapped to the virtual space around the :ref:`XROrigin3D<class_XROrigin3D>` point. The points form a convex polygon that can be used to react to or visualise the play area. This returns an empty array if this feature is not supported or if the information is not yet available.

----

.. _class_XRInterface_method_get_render_target_size:

- :ref:`Vector2<class_Vector2>` **get_render_target_size** **(** **)**

Returns the resolution at which we should render our intermediate results before things like lens distortion are applied by the VR platform.

----

.. _class_XRInterface_method_get_tracking_status:

- :ref:`TrackingStatus<enum_XRInterface_TrackingStatus>` **get_tracking_status** **(** **)** |const|

If supported, returns the status of our tracking. This will allow you to provide feedback to the user whether there are issues with positional tracking.

----

.. _class_XRInterface_method_get_view_count:

- :ref:`int<class_int>` **get_view_count** **(** **)**

Returns the number of views that need to be rendered for this device. 1 for Monoscopic, 2 for Stereoscopic.

----

.. _class_XRInterface_method_initialize:

- :ref:`bool<class_bool>` **initialize** **(** **)**

Call this to initialize this interface. The first interface that is initialized is identified as the primary interface and it will be used for rendering output.

After initializing the interface you want to use you then need to enable the AR/VR mode of a viewport and rendering should commence.

\ **Note:** You must enable the XR mode on the main viewport for any device that uses the main output of Godot, such as for mobile VR.

If you do this for a platform that handles its own output (such as OpenVR) Godot will show just one eye without distortion on screen. Alternatively, you can add a separate viewport node to your scene and enable AR/VR on that viewport. It will be used to output to the HMD, leaving you free to do anything you like in the main window, such as using a separate camera as a spectator camera or rendering something completely different.

While currently not used, you can activate additional interfaces. You may wish to do this if you want to track controllers from other platforms. However, at this point in time only one interface can render to an HMD.

----

.. _class_XRInterface_method_is_initialized:

- :ref:`bool<class_bool>` **is_initialized** **(** **)** |const|

Is ``true`` if this interface has been initialised.

----

.. _class_XRInterface_method_set_play_area_mode:

- :ref:`bool<class_bool>` **set_play_area_mode** **(** :ref:`PlayAreaMode<enum_XRInterface_PlayAreaMode>` mode **)**

Sets the active play area mode, will return ``false`` if the mode can't be used with this interface.

----

.. _class_XRInterface_method_supports_play_area_mode:

- :ref:`bool<class_bool>` **supports_play_area_mode** **(** :ref:`PlayAreaMode<enum_XRInterface_PlayAreaMode>` mode **)**

Call this to find out if a given play area mode is supported by this interface.

----

.. _class_XRInterface_method_trigger_haptic_pulse:

- void **trigger_haptic_pulse** **(** :ref:`String<class_String>` action_name, :ref:`StringName<class_StringName>` tracker_name, :ref:`float<class_float>` frequency, :ref:`float<class_float>` amplitude, :ref:`float<class_float>` duration_sec, :ref:`float<class_float>` delay_sec **)**

Triggers a haptic pulse on a device associated with this interface.

\ ``action_name`` is the name of the action for this pulse.

\ ``tracker_name`` is optional and can be used to direct the pulse to a specific device provided that device is bound to this haptic.

----

.. _class_XRInterface_method_uninitialize:

- void **uninitialize** **(** **)**

Turns the interface off.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
