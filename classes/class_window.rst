:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Window.xml.

.. _class_Window:

Window
======

**Inherits:** :ref:`Viewport<class_Viewport>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`AcceptDialog<class_AcceptDialog>`, :ref:`Popup<class_Popup>`

Base class for all windows.

Description
-----------

A node that creates a window. The window can either be a native system window or embedded inside another ``Window`` (see :ref:`Viewport.gui_embed_subwindows<class_Viewport_property_gui_embed_subwindows>`).

At runtime, ``Window``\ s will not close automatically when requested. You need to handle it manually using :ref:`close_requested<class_Window_signal_close_requested>` (this applies both to clicking close button and clicking outside popup).

Properties
----------

+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`always_on_top<class_Window_property_always_on_top>`               | ``false``              |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`auto_translate<class_Window_property_auto_translate>`             | ``true``               |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`borderless<class_Window_property_borderless>`                     | ``false``              |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`ContentScaleAspect<enum_Window_ContentScaleAspect>` | :ref:`content_scale_aspect<class_Window_property_content_scale_aspect>` | ``0``                  |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`float<class_float>`                                 | :ref:`content_scale_factor<class_Window_property_content_scale_factor>` | ``1.0``                |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`ContentScaleMode<enum_Window_ContentScaleMode>`     | :ref:`content_scale_mode<class_Window_property_content_scale_mode>`     | ``0``                  |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`Vector2i<class_Vector2i>`                           | :ref:`content_scale_size<class_Window_property_content_scale_size>`     | ``Vector2i(0, 0)``     |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`int<class_int>`                                     | :ref:`current_screen<class_Window_property_current_screen>`             | ``0``                  |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`exclusive<class_Window_property_exclusive>`                       | ``false``              |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`extend_to_title<class_Window_property_extend_to_title>`           | ``false``              |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`Vector2i<class_Vector2i>`                           | :ref:`max_size<class_Window_property_max_size>`                         | ``Vector2i(0, 0)``     |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`Vector2i<class_Vector2i>`                           | :ref:`min_size<class_Window_property_min_size>`                         | ``Vector2i(0, 0)``     |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`Mode<enum_Window_Mode>`                             | :ref:`mode<class_Window_property_mode>`                                 | ``0``                  |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`popup_window<class_Window_property_popup_window>`                 | ``false``              |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`Vector2i<class_Vector2i>`                           | :ref:`position<class_Window_property_position>`                         | ``Vector2i(0, 0)``     |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`Vector2i<class_Vector2i>`                           | :ref:`size<class_Window_property_size>`                                 | ``Vector2i(100, 100)`` |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`Theme<class_Theme>`                                 | :ref:`theme<class_Window_property_theme>`                               |                        |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`StringName<class_StringName>`                       | :ref:`theme_type_variation<class_Window_property_theme_type_variation>` | ``&""``                |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`String<class_String>`                               | :ref:`title<class_Window_property_title>`                               | ``""``                 |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`transient<class_Window_property_transient>`                       | ``false``              |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`transparent<class_Window_property_transparent>`                   | ``false``              |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`unfocusable<class_Window_property_unfocusable>`                   | ``false``              |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`unresizable<class_Window_property_unresizable>`                   | ``false``              |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`visible<class_Window_property_visible>`                           | ``true``               |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+
| :ref:`bool<class_bool>`                                   | :ref:`wrap_controls<class_Window_property_wrap_controls>`               | ``false``              |
+-----------------------------------------------------------+-------------------------------------------------------------------------+------------------------+

Methods
-------

+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`can_draw<class_Window_method_can_draw>` **(** **)** |const|                                                                                                                           |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`child_controls_changed<class_Window_method_child_controls_changed>` **(** **)**                                                                                                       |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`                       | :ref:`get_contents_minimum_size<class_Window_method_get_contents_minimum_size>` **(** **)** |const|                                                                                         |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`get_flag<class_Window_method_get_flag>` **(** :ref:`Flags<enum_Window_Flags>` flag **)** |const|                                                                                      |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`LayoutDirection<enum_Window_LayoutDirection>` | :ref:`get_layout_direction<class_Window_method_get_layout_direction>` **(** **)** |const|                                                                                                   |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>`                     | :ref:`get_real_size<class_Window_method_get_real_size>` **(** **)** |const|                                                                                                                 |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`                           | :ref:`get_theme_color<class_Window_method_get_theme_color>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|                 |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`get_theme_constant<class_Window_method_get_theme_constant>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|           |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                           | :ref:`get_theme_default_base_scale<class_Window_method_get_theme_default_base_scale>` **(** **)** |const|                                                                                   |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Font<class_Font>`                             | :ref:`get_theme_default_font<class_Window_method_get_theme_default_font>` **(** **)** |const|                                                                                               |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`get_theme_default_font_size<class_Window_method_get_theme_default_font_size>` **(** **)** |const|                                                                                     |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Font<class_Font>`                             | :ref:`get_theme_font<class_Window_method_get_theme_font>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|                   |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`get_theme_font_size<class_Window_method_get_theme_font_size>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|         |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Texture2D<class_Texture2D>`                   | :ref:`get_theme_icon<class_Window_method_get_theme_icon>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|                   |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`StyleBox<class_StyleBox>`                     | :ref:`get_theme_stylebox<class_Window_method_get_theme_stylebox>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|           |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`grab_focus<class_Window_method_grab_focus>` **(** **)**                                                                                                                               |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`has_focus<class_Window_method_has_focus>` **(** **)** |const|                                                                                                                         |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`has_theme_color<class_Window_method_has_theme_color>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|                 |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`has_theme_constant<class_Window_method_has_theme_constant>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|           |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`has_theme_font<class_Window_method_has_theme_font>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|                   |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`has_theme_font_size<class_Window_method_has_theme_font_size>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|         |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`has_theme_icon<class_Window_method_has_theme_icon>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|                   |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`has_theme_stylebox<class_Window_method_has_theme_stylebox>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|           |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`hide<class_Window_method_hide>` **(** **)**                                                                                                                                           |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`is_embedded<class_Window_method_is_embedded>` **(** **)** |const|                                                                                                                     |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`is_layout_rtl<class_Window_method_is_layout_rtl>` **(** **)** |const|                                                                                                                 |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`is_maximize_allowed<class_Window_method_is_maximize_allowed>` **(** **)** |const|                                                                                                     |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`is_using_font_oversampling<class_Window_method_is_using_font_oversampling>` **(** **)** |const|                                                                                       |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`move_to_foreground<class_Window_method_move_to_foreground>` **(** **)**                                                                                                               |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`popup<class_Window_method_popup>` **(** :ref:`Rect2i<class_Rect2i>` rect=Rect2i(0, 0, 0, 0) **)**                                                                                     |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`popup_centered<class_Window_method_popup_centered>` **(** :ref:`Vector2i<class_Vector2i>` minsize=Vector2i(0, 0) **)**                                                                |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`popup_centered_clamped<class_Window_method_popup_centered_clamped>` **(** :ref:`Vector2i<class_Vector2i>` minsize=Vector2i(0, 0), :ref:`float<class_float>` fallback_ratio=0.75 **)** |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`popup_centered_ratio<class_Window_method_popup_centered_ratio>` **(** :ref:`float<class_float>` ratio=0.8 **)**                                                                       |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`popup_on_parent<class_Window_method_popup_on_parent>` **(** :ref:`Rect2i<class_Rect2i>` parent_rect **)**                                                                             |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`request_attention<class_Window_method_request_attention>` **(** **)**                                                                                                                 |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`reset_size<class_Window_method_reset_size>` **(** **)**                                                                                                                               |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_flag<class_Window_method_set_flag>` **(** :ref:`Flags<enum_Window_Flags>` flag, :ref:`bool<class_bool>` enabled **)**                                                             |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_ime_active<class_Window_method_set_ime_active>` **(** :ref:`bool<class_bool>` active **)**                                                                                        |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_ime_position<class_Window_method_set_ime_position>` **(** :ref:`Vector2i<class_Vector2i>` position **)**                                                                          |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_layout_direction<class_Window_method_set_layout_direction>` **(** :ref:`LayoutDirection<enum_Window_LayoutDirection>` direction **)**                                             |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_use_font_oversampling<class_Window_method_set_use_font_oversampling>` **(** :ref:`bool<class_bool>` enable **)**                                                                  |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`show<class_Window_method_show>` **(** **)**                                                                                                                                           |
+-----------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Theme Properties
----------------

+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`Color<class_Color>`         | :ref:`title_color<class_Window_theme_color_title_color>`                       | ``Color(0.875, 0.875, 0.875, 1)`` |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`Color<class_Color>`         | :ref:`title_outline_modulate<class_Window_theme_color_title_outline_modulate>` | ``Color(1, 1, 1, 1)``             |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`int<class_int>`             | :ref:`close_h_offset<class_Window_theme_constant_close_h_offset>`              | ``18``                            |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`int<class_int>`             | :ref:`close_v_offset<class_Window_theme_constant_close_v_offset>`              | ``24``                            |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`int<class_int>`             | :ref:`resize_margin<class_Window_theme_constant_resize_margin>`                | ``4``                             |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`int<class_int>`             | :ref:`title_height<class_Window_theme_constant_title_height>`                  | ``36``                            |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`int<class_int>`             | :ref:`title_outline_size<class_Window_theme_constant_title_outline_size>`      | ``0``                             |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`Font<class_Font>`           | :ref:`title_font<class_Window_theme_font_title_font>`                          |                                   |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`int<class_int>`             | :ref:`title_font_size<class_Window_theme_font_size_title_font_size>`           |                                   |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`Texture2D<class_Texture2D>` | :ref:`close<class_Window_theme_icon_close>`                                    |                                   |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`Texture2D<class_Texture2D>` | :ref:`close_pressed<class_Window_theme_icon_close_pressed>`                    |                                   |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+
| :ref:`StyleBox<class_StyleBox>`   | :ref:`embedded_border<class_Window_theme_style_embedded_border>`               |                                   |
+-----------------------------------+--------------------------------------------------------------------------------+-----------------------------------+

Signals
-------

.. _class_Window_signal_about_to_popup:

- **about_to_popup** **(** **)**

Emitted right after :ref:`popup<class_Window_method_popup>` call, before the ``Window`` appears or does anything.

----

.. _class_Window_signal_close_requested:

- **close_requested** **(** **)**

Emitted when the ``Window``'s close button is pressed or when :ref:`popup_window<class_Window_property_popup_window>` is enabled and user clicks outside the window.

This signal can be used to handle window closing, e.g. by connecting it to :ref:`hide<class_Window_method_hide>`.

----

.. _class_Window_signal_files_dropped:

- **files_dropped** **(** :ref:`PackedStringArray<class_PackedStringArray>` files **)**

Emitted when files are dragged from the OS file manager and dropped in the game window. The argument is a list of file paths.

Note that this method only works with non-embedded windows, i.e. the main window and ``Window``-derived nodes when :ref:`Viewport.gui_embed_subwindows<class_Viewport_property_gui_embed_subwindows>` is disabled in the main viewport.

Example usage:

::

    func _ready():
        get_viewport().files_dropped.connect(on_files_dropped)
    
    func on_files_dropped(files):
        print(files)

----

.. _class_Window_signal_focus_entered:

- **focus_entered** **(** **)**

Emitted when the ``Window`` gains focus.

----

.. _class_Window_signal_focus_exited:

- **focus_exited** **(** **)**

Emitted when the ``Window`` loses its focus.

----

.. _class_Window_signal_go_back_requested:

- **go_back_requested** **(** **)**

Emitted when a go back request is sent (e.g. pressing the "Back" button on Android), right after :ref:`Node.NOTIFICATION_WM_GO_BACK_REQUEST<class_Node_constant_NOTIFICATION_WM_GO_BACK_REQUEST>`.

----

.. _class_Window_signal_mouse_entered:

- **mouse_entered** **(** **)**

Emitted when the mouse cursor enters the ``Window``'s area, regardless if it's currently focused or not.

----

.. _class_Window_signal_mouse_exited:

- **mouse_exited** **(** **)**

Emitted when the mouse cursor exits the ``Window``'s area (including when it's hovered over another window on top of this one).

----

.. _class_Window_signal_theme_changed:

- **theme_changed** **(** **)**

Emitted when the :ref:`NOTIFICATION_THEME_CHANGED<class_Window_constant_NOTIFICATION_THEME_CHANGED>` notification is sent.

----

.. _class_Window_signal_visibility_changed:

- **visibility_changed** **(** **)**

Emitted when ``Window`` is made visible or disappears.

----

.. _class_Window_signal_window_input:

- **window_input** **(** :ref:`InputEvent<class_InputEvent>` event **)**

Emitted when the ``Window`` is currently focused and receives any input, passing the received event as an argument.

Enumerations
------------

.. _enum_Window_Mode:

.. _class_Window_constant_MODE_WINDOWED:

.. _class_Window_constant_MODE_MINIMIZED:

.. _class_Window_constant_MODE_MAXIMIZED:

.. _class_Window_constant_MODE_FULLSCREEN:

.. _class_Window_constant_MODE_EXCLUSIVE_FULLSCREEN:

enum **Mode**:

- **MODE_WINDOWED** = **0** --- Windowed mode, i.e. ``Window`` doesn't occupy whole screen (unless set to the size of the screen).

- **MODE_MINIMIZED** = **1** --- Minimized window mode, i.e. ``Window`` is not visible and available on window manager's window list. Normally happens when the minimize button is presesd.

- **MODE_MAXIMIZED** = **2** --- Maximized window mode, i.e. ``Window`` will occupy whole screen area except task bar and still display its borders. Normally happens when the minimize button is presesd.

- **MODE_FULLSCREEN** = **3** --- Fullscreen window mode. Note that this is not *exclusive* fullscreen. On Windows and Linux, a borderless window is used to emulate fullscreen. On macOS, a new desktop is used to display the running project.

Regardless of the platform, enabling fullscreen will change the window size to match the monitor's size. Therefore, make sure your project supports :doc:`multiple resolutions <../tutorials/rendering/multiple_resolutions>` when enabling fullscreen mode.

- **MODE_EXCLUSIVE_FULLSCREEN** = **4** --- Exclusive fullscreen window mode. This mode is implemented on Windows only. On other platforms, it is equivalent to :ref:`MODE_FULLSCREEN<class_Window_constant_MODE_FULLSCREEN>`.

Only one window in exclusive fullscreen mode can be visible on a given screen at a time. If multiple windows are in exclusive fullscreen mode for the same screen, the last one being set to this mode takes precedence.

Regardless of the platform, enabling fullscreen will change the window size to match the monitor's size. Therefore, make sure your project supports :doc:`multiple resolutions <../tutorials/rendering/multiple_resolutions>` when enabling fullscreen mode.

----

.. _enum_Window_Flags:

.. _class_Window_constant_FLAG_RESIZE_DISABLED:

.. _class_Window_constant_FLAG_BORDERLESS:

.. _class_Window_constant_FLAG_ALWAYS_ON_TOP:

.. _class_Window_constant_FLAG_TRANSPARENT:

.. _class_Window_constant_FLAG_NO_FOCUS:

.. _class_Window_constant_FLAG_POPUP:

.. _class_Window_constant_FLAG_EXTEND_TO_TITLE:

.. _class_Window_constant_FLAG_MAX:

enum **Flags**:

- **FLAG_RESIZE_DISABLED** = **0** --- The window's ability to be resized. Set with :ref:`unresizable<class_Window_property_unresizable>`.

- **FLAG_BORDERLESS** = **1** --- Borderless window. Set with :ref:`borderless<class_Window_property_borderless>`.

- **FLAG_ALWAYS_ON_TOP** = **2** --- Flag for making the window always on top of all other windows. Set with :ref:`always_on_top<class_Window_property_always_on_top>`.

- **FLAG_TRANSPARENT** = **3** --- Flag for per-pixel transparency. Set with :ref:`transparent<class_Window_property_transparent>`.

- **FLAG_NO_FOCUS** = **4** --- The window's ability to gain focus. Set with :ref:`unfocusable<class_Window_property_unfocusable>`.

- **FLAG_POPUP** = **5** --- Whether the window is popup or a regular window. Set with :ref:`popup_window<class_Window_property_popup_window>`.

- **FLAG_EXTEND_TO_TITLE** = **6** --- Window contents is expanded to the full size of the window, window title bar is transparent.

- **FLAG_MAX** = **7** --- Max value of the :ref:`Flags<enum_Window_Flags>`.

----

.. _enum_Window_ContentScaleMode:

.. _class_Window_constant_CONTENT_SCALE_MODE_DISABLED:

.. _class_Window_constant_CONTENT_SCALE_MODE_CANVAS_ITEMS:

.. _class_Window_constant_CONTENT_SCALE_MODE_VIEWPORT:

enum **ContentScaleMode**:

- **CONTENT_SCALE_MODE_DISABLED** = **0** --- The content will not be scaled to match the ``Window``'s size.

- **CONTENT_SCALE_MODE_CANVAS_ITEMS** = **1** --- The content will be rendered at the target size. This is more performance-expensive than :ref:`CONTENT_SCALE_MODE_VIEWPORT<class_Window_constant_CONTENT_SCALE_MODE_VIEWPORT>`, but provides better results.

- **CONTENT_SCALE_MODE_VIEWPORT** = **2** --- The content will be rendered at the base size and then scaled to the target size. More performant than :ref:`CONTENT_SCALE_MODE_CANVAS_ITEMS<class_Window_constant_CONTENT_SCALE_MODE_CANVAS_ITEMS>`, but results in pixelated image.

----

.. _enum_Window_ContentScaleAspect:

.. _class_Window_constant_CONTENT_SCALE_ASPECT_IGNORE:

.. _class_Window_constant_CONTENT_SCALE_ASPECT_KEEP:

.. _class_Window_constant_CONTENT_SCALE_ASPECT_KEEP_WIDTH:

.. _class_Window_constant_CONTENT_SCALE_ASPECT_KEEP_HEIGHT:

.. _class_Window_constant_CONTENT_SCALE_ASPECT_EXPAND:

enum **ContentScaleAspect**:

- **CONTENT_SCALE_ASPECT_IGNORE** = **0** --- The aspect will be ignored. Scaling will simply stretch the content to fit the target size.

- **CONTENT_SCALE_ASPECT_KEEP** = **1** --- The content's aspect will be preserved. If the target size has different aspect from the base one, the image will be centered and black bars will appear on left and right sides.

- **CONTENT_SCALE_ASPECT_KEEP_WIDTH** = **2** --- The content can be expanded vertically. Scaling horizontally will result in keeping the width ratio and then black bars on left and right sides.

- **CONTENT_SCALE_ASPECT_KEEP_HEIGHT** = **3** --- The content can be expanded horizontally. Scaling vertically will result in keeping the height ratio and then black bars on top and bottom sides.

- **CONTENT_SCALE_ASPECT_EXPAND** = **4** --- The content's aspect will be preserved. If the target size has different aspect from the base one, the content will stay in the to-left corner and add an extra visible area in the stretched space.

----

.. _enum_Window_LayoutDirection:

.. _class_Window_constant_LAYOUT_DIRECTION_INHERITED:

.. _class_Window_constant_LAYOUT_DIRECTION_LOCALE:

.. _class_Window_constant_LAYOUT_DIRECTION_LTR:

.. _class_Window_constant_LAYOUT_DIRECTION_RTL:

enum **LayoutDirection**:

- **LAYOUT_DIRECTION_INHERITED** = **0** --- Automatic layout direction, determined from the parent window layout direction.

- **LAYOUT_DIRECTION_LOCALE** = **1** --- Automatic layout direction, determined from the current locale.

- **LAYOUT_DIRECTION_LTR** = **2** --- Left-to-right layout direction.

- **LAYOUT_DIRECTION_RTL** = **3** --- Right-to-left layout direction.

Constants
---------

.. _class_Window_constant_NOTIFICATION_VISIBILITY_CHANGED:

.. _class_Window_constant_NOTIFICATION_THEME_CHANGED:

- **NOTIFICATION_VISIBILITY_CHANGED** = **30** --- Emitted when ``Window``'s visibility changes, right before :ref:`visibility_changed<class_Window_signal_visibility_changed>`.

- **NOTIFICATION_THEME_CHANGED** = **32** --- Sent when the node needs to refresh its theme items. This happens in one of the following cases:

- The :ref:`theme<class_Window_property_theme>` property is changed on this node or any of its ancestors.

- The :ref:`theme_type_variation<class_Window_property_theme_type_variation>` property is changed on this node.

- The node enters the scene tree.

\ **Note:** As an optimization, this notification won't be sent from changes that occur while this node is outside of the scene tree. Instead, all of the theme item updates can be applied at once when the node enters the scene tree.

Property Descriptions
---------------------

.. _class_Window_property_always_on_top:

- :ref:`bool<class_bool>` **always_on_top**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, the window will be on top of all other windows. Does not work if :ref:`transient<class_Window_property_transient>` is enabled.

----

.. _class_Window_property_auto_translate:

- :ref:`bool<class_bool>` **auto_translate**

+-----------+---------------------------+
| *Default* | ``true``                  |
+-----------+---------------------------+
| *Setter*  | set_auto_translate(value) |
+-----------+---------------------------+
| *Getter*  | is_auto_translating()     |
+-----------+---------------------------+

Toggles if any text should automatically change to its translated version depending on the current locale.

----

.. _class_Window_property_borderless:

- :ref:`bool<class_bool>` **borderless**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, the window will have no borders.

----

.. _class_Window_property_content_scale_aspect:

- :ref:`ContentScaleAspect<enum_Window_ContentScaleAspect>` **content_scale_aspect**

+-----------+---------------------------------+
| *Default* | ``0``                           |
+-----------+---------------------------------+
| *Setter*  | set_content_scale_aspect(value) |
+-----------+---------------------------------+
| *Getter*  | get_content_scale_aspect()      |
+-----------+---------------------------------+

Specifies how the content's aspect behaves when the ``Window`` is resized. The base aspect is determined by :ref:`content_scale_size<class_Window_property_content_scale_size>`.

----

.. _class_Window_property_content_scale_factor:

- :ref:`float<class_float>` **content_scale_factor**

+-----------+---------------------------------+
| *Default* | ``1.0``                         |
+-----------+---------------------------------+
| *Setter*  | set_content_scale_factor(value) |
+-----------+---------------------------------+
| *Getter*  | get_content_scale_factor()      |
+-----------+---------------------------------+

Specifies the base scale of ``Window``'s content when its :ref:`size<class_Window_property_size>` is equal to :ref:`content_scale_size<class_Window_property_content_scale_size>`.

----

.. _class_Window_property_content_scale_mode:

- :ref:`ContentScaleMode<enum_Window_ContentScaleMode>` **content_scale_mode**

+-----------+-------------------------------+
| *Default* | ``0``                         |
+-----------+-------------------------------+
| *Setter*  | set_content_scale_mode(value) |
+-----------+-------------------------------+
| *Getter*  | get_content_scale_mode()      |
+-----------+-------------------------------+

Specifies how the content is scaled when the ``Window`` is resized.

----

.. _class_Window_property_content_scale_size:

- :ref:`Vector2i<class_Vector2i>` **content_scale_size**

+-----------+-------------------------------+
| *Default* | ``Vector2i(0, 0)``            |
+-----------+-------------------------------+
| *Setter*  | set_content_scale_size(value) |
+-----------+-------------------------------+
| *Getter*  | get_content_scale_size()      |
+-----------+-------------------------------+

Base size of the content (i.e. nodes that are drawn inside the window). If non-zero, ``Window``'s content will be scaled when the window is resized to a different size.

----

.. _class_Window_property_current_screen:

- :ref:`int<class_int>` **current_screen**

+-----------+---------------------------+
| *Default* | ``0``                     |
+-----------+---------------------------+
| *Setter*  | set_current_screen(value) |
+-----------+---------------------------+
| *Getter*  | get_current_screen()      |
+-----------+---------------------------+

The screen the window is currently on.

----

.. _class_Window_property_exclusive:

- :ref:`bool<class_bool>` **exclusive**

+-----------+----------------------+
| *Default* | ``false``            |
+-----------+----------------------+
| *Setter*  | set_exclusive(value) |
+-----------+----------------------+
| *Getter*  | is_exclusive()       |
+-----------+----------------------+

If ``true``, the ``Window`` will be in exclusive mode. Exclusive windows are always on top of their parent and will block all input going to the parent ``Window``.

Needs :ref:`transient<class_Window_property_transient>` enabled to work.

----

.. _class_Window_property_extend_to_title:

- :ref:`bool<class_bool>` **extend_to_title**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, the ``Window`` contents is expanded to the full size of the window, window title bar is transparent.

----

.. _class_Window_property_max_size:

- :ref:`Vector2i<class_Vector2i>` **max_size**

+-----------+---------------------+
| *Default* | ``Vector2i(0, 0)``  |
+-----------+---------------------+
| *Setter*  | set_max_size(value) |
+-----------+---------------------+
| *Getter*  | get_max_size()      |
+-----------+---------------------+

If non-zero, the ``Window`` can't be resized to be bigger than this size.

\ **Note:** This property will be ignored if the value is lower than :ref:`min_size<class_Window_property_min_size>`.

----

.. _class_Window_property_min_size:

- :ref:`Vector2i<class_Vector2i>` **min_size**

+-----------+---------------------+
| *Default* | ``Vector2i(0, 0)``  |
+-----------+---------------------+
| *Setter*  | set_min_size(value) |
+-----------+---------------------+
| *Getter*  | get_min_size()      |
+-----------+---------------------+

If non-zero, the ``Window`` can't be resized to be smaller than this size.

\ **Note:** This property will be ignored in favor of :ref:`get_contents_minimum_size<class_Window_method_get_contents_minimum_size>` if :ref:`wrap_controls<class_Window_property_wrap_controls>` is enabled and if its size is bigger.

----

.. _class_Window_property_mode:

- :ref:`Mode<enum_Window_Mode>` **mode**

+-----------+-----------------+
| *Default* | ``0``           |
+-----------+-----------------+
| *Setter*  | set_mode(value) |
+-----------+-----------------+
| *Getter*  | get_mode()      |
+-----------+-----------------+

Set's the window's current mode.

\ **Note:** Fullscreen mode is not exclusive fullscreen on Windows and Linux.

----

.. _class_Window_property_popup_window:

- :ref:`bool<class_bool>` **popup_window**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, the ``Window`` will be considered a popup. Popups are sub-windows that don't show as separate windows in system's window manager's window list and will send close request when anything is clicked outside of them (unless :ref:`exclusive<class_Window_property_exclusive>` is enabled).

----

.. _class_Window_property_position:

- :ref:`Vector2i<class_Vector2i>` **position**

+-----------+---------------------+
| *Default* | ``Vector2i(0, 0)``  |
+-----------+---------------------+
| *Setter*  | set_position(value) |
+-----------+---------------------+
| *Getter*  | get_position()      |
+-----------+---------------------+

The window's position in pixels.

----

.. _class_Window_property_size:

- :ref:`Vector2i<class_Vector2i>` **size**

+-----------+------------------------+
| *Default* | ``Vector2i(100, 100)`` |
+-----------+------------------------+
| *Setter*  | set_size(value)        |
+-----------+------------------------+
| *Getter*  | get_size()             |
+-----------+------------------------+

The window's size in pixels.

----

.. _class_Window_property_theme:

- :ref:`Theme<class_Theme>` **theme**

+----------+------------------+
| *Setter* | set_theme(value) |
+----------+------------------+
| *Getter* | get_theme()      |
+----------+------------------+

The :ref:`Theme<class_Theme>` resource that determines the style of the underlying :ref:`Control<class_Control>` nodes.

\ ``Window`` styles will have no effect unless the window is embedded.

----

.. _class_Window_property_theme_type_variation:

- :ref:`StringName<class_StringName>` **theme_type_variation**

+-----------+---------------------------------+
| *Default* | ``&""``                         |
+-----------+---------------------------------+
| *Setter*  | set_theme_type_variation(value) |
+-----------+---------------------------------+
| *Getter*  | get_theme_type_variation()      |
+-----------+---------------------------------+

The name of a theme type variation used by this ``Window`` to look up its own theme items. See :ref:`Control.theme_type_variation<class_Control_property_theme_type_variation>` for more details.

----

.. _class_Window_property_title:

- :ref:`String<class_String>` **title**

+-----------+------------------+
| *Default* | ``""``           |
+-----------+------------------+
| *Setter*  | set_title(value) |
+-----------+------------------+
| *Getter*  | get_title()      |
+-----------+------------------+

The window's title. If the ``Window`` is non-embedded, title styles set in :ref:`Theme<class_Theme>` will have no effect.

----

.. _class_Window_property_transient:

- :ref:`bool<class_bool>` **transient**

+-----------+----------------------+
| *Default* | ``false``            |
+-----------+----------------------+
| *Setter*  | set_transient(value) |
+-----------+----------------------+
| *Getter*  | is_transient()       |
+-----------+----------------------+

If ``true``, the ``Window`` is transient, i.e. it's considered a child of another ``Window``. Transient windows can't be in fullscreen mode and will return focus to their parent when closed.

Note that behavior might be different depending on the platform.

----

.. _class_Window_property_transparent:

- :ref:`bool<class_bool>` **transparent**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, the ``Window``'s background can be transparent. This is best used with embedded windows. Currently non-embedded ``Window`` transparency is implemented only for MacOS.

----

.. _class_Window_property_unfocusable:

- :ref:`bool<class_bool>` **unfocusable**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, the ``Window`` can't be focused nor interacted with. It can still be visible.

----

.. _class_Window_property_unresizable:

- :ref:`bool<class_bool>` **unresizable**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flag(value) |
+-----------+-----------------+
| *Getter*  | get_flag()      |
+-----------+-----------------+

If ``true``, the window can't be resized. Minimize and maximize buttons are disabled.

----

.. _class_Window_property_visible:

- :ref:`bool<class_bool>` **visible**

+-----------+--------------------+
| *Default* | ``true``           |
+-----------+--------------------+
| *Setter*  | set_visible(value) |
+-----------+--------------------+
| *Getter*  | is_visible()       |
+-----------+--------------------+

If ``true``, the window is visible.

----

.. _class_Window_property_wrap_controls:

- :ref:`bool<class_bool>` **wrap_controls**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_wrap_controls(value) |
+-----------+--------------------------+
| *Getter*  | is_wrapping_controls()   |
+-----------+--------------------------+

If ``true``, the window's size will automatically update when a child node is added or removed, ignoring :ref:`min_size<class_Window_property_min_size>` if the new size is bigger.

If ``false``, you need to call :ref:`child_controls_changed<class_Window_method_child_controls_changed>` manually.

Method Descriptions
-------------------

.. _class_Window_method_can_draw:

- :ref:`bool<class_bool>` **can_draw** **(** **)** |const|

Returns whether the window is being drawn to the screen.

----

.. _class_Window_method_child_controls_changed:

- void **child_controls_changed** **(** **)**

Requests an update of the ``Window`` size to fit underlying :ref:`Control<class_Control>` nodes.

----

.. _class_Window_method_get_contents_minimum_size:

- :ref:`Vector2<class_Vector2>` **get_contents_minimum_size** **(** **)** |const|

Returns the combined minimum size from the child :ref:`Control<class_Control>` nodes of the window. Use :ref:`child_controls_changed<class_Window_method_child_controls_changed>` to update it when children nodes have changed.

----

.. _class_Window_method_get_flag:

- :ref:`bool<class_bool>` **get_flag** **(** :ref:`Flags<enum_Window_Flags>` flag **)** |const|

Returns ``true`` if the ``flag`` is set.

----

.. _class_Window_method_get_layout_direction:

- :ref:`LayoutDirection<enum_Window_LayoutDirection>` **get_layout_direction** **(** **)** |const|

Returns layout direction and text writing direction.

----

.. _class_Window_method_get_real_size:

- :ref:`Vector2i<class_Vector2i>` **get_real_size** **(** **)** |const|

Returns the window's size including its border.

----

.. _class_Window_method_get_theme_color:

- :ref:`Color<class_Color>` **get_theme_color** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns the :ref:`Color<class_Color>` at ``name`` if the theme has ``theme_type``.

See :ref:`Control.get_theme_color<class_Control_method_get_theme_color>` for more details.

----

.. _class_Window_method_get_theme_constant:

- :ref:`int<class_int>` **get_theme_constant** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns the constant at ``name`` if the theme has ``theme_type``.

See :ref:`Control.get_theme_color<class_Control_method_get_theme_color>` for more details.

----

.. _class_Window_method_get_theme_default_base_scale:

- :ref:`float<class_float>` **get_theme_default_base_scale** **(** **)** |const|

Returns the default base scale defined in the attached :ref:`Theme<class_Theme>`.

See :ref:`Theme.default_base_scale<class_Theme_property_default_base_scale>` for more details.

----

.. _class_Window_method_get_theme_default_font:

- :ref:`Font<class_Font>` **get_theme_default_font** **(** **)** |const|

Returns the default :ref:`Font<class_Font>` defined in the attached :ref:`Theme<class_Theme>`.

See :ref:`Theme.default_font<class_Theme_property_default_font>` for more details.

----

.. _class_Window_method_get_theme_default_font_size:

- :ref:`int<class_int>` **get_theme_default_font_size** **(** **)** |const|

Returns the default font size defined in the attached :ref:`Theme<class_Theme>`.

See :ref:`Theme.default_font_size<class_Theme_property_default_font_size>` for more details.

----

.. _class_Window_method_get_theme_font:

- :ref:`Font<class_Font>` **get_theme_font** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns the :ref:`Font<class_Font>` at ``name`` if the theme has ``theme_type``.

See :ref:`Control.get_theme_color<class_Control_method_get_theme_color>` for more details.

----

.. _class_Window_method_get_theme_font_size:

- :ref:`int<class_int>` **get_theme_font_size** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns the font size at ``name`` if the theme has ``theme_type``.

See :ref:`Control.get_theme_color<class_Control_method_get_theme_color>` for more details.

----

.. _class_Window_method_get_theme_icon:

- :ref:`Texture2D<class_Texture2D>` **get_theme_icon** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns the icon at ``name`` if the theme has ``theme_type``.

See :ref:`Control.get_theme_color<class_Control_method_get_theme_color>` for more details.

----

.. _class_Window_method_get_theme_stylebox:

- :ref:`StyleBox<class_StyleBox>` **get_theme_stylebox** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns the :ref:`StyleBox<class_StyleBox>` at ``name`` if the theme has ``theme_type``.

See :ref:`Control.get_theme_color<class_Control_method_get_theme_color>` for more details.

----

.. _class_Window_method_grab_focus:

- void **grab_focus** **(** **)**

Causes the window to grab focus, allowing it to receive user input.

----

.. _class_Window_method_has_focus:

- :ref:`bool<class_bool>` **has_focus** **(** **)** |const|

Returns ``true`` if the window is focused.

----

.. _class_Window_method_has_theme_color:

- :ref:`bool<class_bool>` **has_theme_color** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns ``true`` if :ref:`Color<class_Color>` with ``name`` is in ``theme_type``.

----

.. _class_Window_method_has_theme_constant:

- :ref:`bool<class_bool>` **has_theme_constant** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns ``true`` if constant with ``name`` is in ``theme_type``.

----

.. _class_Window_method_has_theme_font:

- :ref:`bool<class_bool>` **has_theme_font** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns ``true`` if :ref:`Font<class_Font>` with ``name`` is in ``theme_type``.

----

.. _class_Window_method_has_theme_font_size:

- :ref:`bool<class_bool>` **has_theme_font_size** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns ``true`` if font size with ``name`` is in ``theme_type``.

----

.. _class_Window_method_has_theme_icon:

- :ref:`bool<class_bool>` **has_theme_icon** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns ``true`` if icon with ``name`` is in ``theme_type``.

----

.. _class_Window_method_has_theme_stylebox:

- :ref:`bool<class_bool>` **has_theme_stylebox** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` theme_type="" **)** |const|

Returns ``true`` if :ref:`StyleBox<class_StyleBox>` with ``name`` is in ``theme_type``.

----

.. _class_Window_method_hide:

- void **hide** **(** **)**

Hides the window. This is not the same as minimized state. Hidden window can't be interacted with and needs to be made visible with :ref:`show<class_Window_method_show>`.

----

.. _class_Window_method_is_embedded:

- :ref:`bool<class_bool>` **is_embedded** **(** **)** |const|

Returns ``true`` if the window is currently embedded in another window.

----

.. _class_Window_method_is_layout_rtl:

- :ref:`bool<class_bool>` **is_layout_rtl** **(** **)** |const|

Returns ``true`` if layout is right-to-left.

----

.. _class_Window_method_is_maximize_allowed:

- :ref:`bool<class_bool>` **is_maximize_allowed** **(** **)** |const|

Returns ``true`` if the window can be maximized (the maximize button is enabled).

----

.. _class_Window_method_is_using_font_oversampling:

- :ref:`bool<class_bool>` **is_using_font_oversampling** **(** **)** |const|

Returns ``true`` if font oversampling is enabled. See :ref:`set_use_font_oversampling<class_Window_method_set_use_font_oversampling>`.

----

.. _class_Window_method_move_to_foreground:

- void **move_to_foreground** **(** **)**

Moves the ``Window`` on top of other windows and focuses it.

----

.. _class_Window_method_popup:

- void **popup** **(** :ref:`Rect2i<class_Rect2i>` rect=Rect2i(0, 0, 0, 0) **)**

Shows the ``Window`` and makes it transient (see :ref:`transient<class_Window_property_transient>`). If ``rect`` is provided, it will be set as the ``Window``'s size.

Fails if called on the main window.

----

.. _class_Window_method_popup_centered:

- void **popup_centered** **(** :ref:`Vector2i<class_Vector2i>` minsize=Vector2i(0, 0) **)**

Popups the ``Window`` at the center of the current screen, with optionally given minimum size.

If the ``Window`` is embedded, it will be centered in the parent :ref:`Viewport<class_Viewport>` instead.

----

.. _class_Window_method_popup_centered_clamped:

- void **popup_centered_clamped** **(** :ref:`Vector2i<class_Vector2i>` minsize=Vector2i(0, 0), :ref:`float<class_float>` fallback_ratio=0.75 **)**

Popups the ``Window`` centered inside its parent ``Window``.

\ ``fallback_ratio`` determines the maximum size of the ``Window``, in relation to its parent.

----

.. _class_Window_method_popup_centered_ratio:

- void **popup_centered_ratio** **(** :ref:`float<class_float>` ratio=0.8 **)**

Popups the ``Window`` centered inside its parent ``Window`` and sets its size as a ``ratio`` of parent's size.

----

.. _class_Window_method_popup_on_parent:

- void **popup_on_parent** **(** :ref:`Rect2i<class_Rect2i>` parent_rect **)**

Popups the ``Window`` with a position shifted by parent ``Window``'s position.

If the ``Window`` is embedded, has the same effect as :ref:`popup<class_Window_method_popup>`.

----

.. _class_Window_method_request_attention:

- void **request_attention** **(** **)**

Tells the OS that the ``Window`` needs an attention. This makes the window stand out in some way depending on the system, e.g. it might blink on the task bar.

----

.. _class_Window_method_reset_size:

- void **reset_size** **(** **)**

Resets the size to the minimum size, which is the max of :ref:`min_size<class_Window_property_min_size>` and (if :ref:`wrap_controls<class_Window_property_wrap_controls>` is enabled) :ref:`get_contents_minimum_size<class_Window_method_get_contents_minimum_size>`. This is equivalent to calling ``set_size(Vector2i())`` (or any size below the minimum).

----

.. _class_Window_method_set_flag:

- void **set_flag** **(** :ref:`Flags<enum_Window_Flags>` flag, :ref:`bool<class_bool>` enabled **)**

Sets a specified window flag.

----

.. _class_Window_method_set_ime_active:

- void **set_ime_active** **(** :ref:`bool<class_bool>` active **)**

If ``active`` is ``true``, enables system's native IME (Input Method Editor).

----

.. _class_Window_method_set_ime_position:

- void **set_ime_position** **(** :ref:`Vector2i<class_Vector2i>` position **)**

Moves IME to the given position.

----

.. _class_Window_method_set_layout_direction:

- void **set_layout_direction** **(** :ref:`LayoutDirection<enum_Window_LayoutDirection>` direction **)**

Sets layout direction and text writing direction. Right-to-left layouts are necessary for certain languages (e.g. Arabic and Hebrew).

----

.. _class_Window_method_set_use_font_oversampling:

- void **set_use_font_oversampling** **(** :ref:`bool<class_bool>` enable **)**

Enables font oversampling. This makes fonts look better when they are scaled up.

----

.. _class_Window_method_show:

- void **show** **(** **)**

Makes the ``Window`` appear. This enables interactions with the ``Window`` and doesn't change any of its property other than visibility (unlike e.g. :ref:`popup<class_Window_method_popup>`).

Theme Property Descriptions
---------------------------

.. _class_Window_theme_color_title_color:

- :ref:`Color<class_Color>` **title_color**

+-----------+-----------------------------------+
| *Default* | ``Color(0.875, 0.875, 0.875, 1)`` |
+-----------+-----------------------------------+

The color of the title's text.

----

.. _class_Window_theme_color_title_outline_modulate:

- :ref:`Color<class_Color>` **title_outline_modulate**

+-----------+-----------------------+
| *Default* | ``Color(1, 1, 1, 1)`` |
+-----------+-----------------------+

The color of the title's text outline.

----

.. _class_Window_theme_constant_close_h_offset:

- :ref:`int<class_int>` **close_h_offset**

+-----------+--------+
| *Default* | ``18`` |
+-----------+--------+

Horizontal position offset of the close button.

----

.. _class_Window_theme_constant_close_v_offset:

- :ref:`int<class_int>` **close_v_offset**

+-----------+--------+
| *Default* | ``24`` |
+-----------+--------+

Vertical position offset of the close button.

----

.. _class_Window_theme_constant_resize_margin:

- :ref:`int<class_int>` **resize_margin**

+-----------+-------+
| *Default* | ``4`` |
+-----------+-------+

Defines the outside margin at which the window border can be grabbed with mouse and resized.

----

.. _class_Window_theme_constant_title_height:

- :ref:`int<class_int>` **title_height**

+-----------+--------+
| *Default* | ``36`` |
+-----------+--------+

Height of the title bar.

----

.. _class_Window_theme_constant_title_outline_size:

- :ref:`int<class_int>` **title_outline_size**

+-----------+-------+
| *Default* | ``0`` |
+-----------+-------+

The size of the title outline.

----

.. _class_Window_theme_font_title_font:

- :ref:`Font<class_Font>` **title_font**

The font used to draw the title.

----

.. _class_Window_theme_font_size_title_font_size:

- :ref:`int<class_int>` **title_font_size**

The size of the title font.

----

.. _class_Window_theme_icon_close:

- :ref:`Texture2D<class_Texture2D>` **close**

The icon for the close button.

----

.. _class_Window_theme_icon_close_pressed:

- :ref:`Texture2D<class_Texture2D>` **close_pressed**

The icon for the close button when it's being pressed.

----

.. _class_Window_theme_style_embedded_border:

- :ref:`StyleBox<class_StyleBox>` **embedded_border**

The background style used when the ``Window`` is embedded. Note that this is drawn only under the window's content, excluding the title. For proper borders and title bar style, you can use ``expand_margin_*`` properties of :ref:`StyleBoxFlat<class_StyleBoxFlat>`.

\ **Note:** The content background will not be visible unless :ref:`transparent<class_Window_property_transparent>` is enabled.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
