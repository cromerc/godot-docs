:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/modules/noise/doc_classes/NoiseTexture2D.xml.

.. _class_NoiseTexture2D:

NoiseTexture2D
==============

**Inherits:** :ref:`Texture2D<class_Texture2D>` **<** :ref:`Texture<class_Texture>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

A texture filled with noise generated by a :ref:`Noise<class_Noise>` object.

Description
-----------

Uses :ref:`FastNoiseLite<class_FastNoiseLite>` or other libraries to fill the texture data of your desired size.

NoiseTexture2D can also generate normalmap textures.

The class uses :ref:`Thread<class_Thread>`\ s to generate the texture data internally, so :ref:`Texture2D.get_image<class_Texture2D_method_get_image>` may return ``null`` if the generation process has not completed yet. In that case, you need to wait for the texture to be generated before accessing the image and the generated byte data:

::

    var texture = NoiseTexture2D.new()
    texture.noise = FastNoiseLite.new()
    await texture.changed
    var image = texture.get_image()
    var data = image.get_data()

Properties
----------

+---------------------------------+---------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`         | :ref:`as_normal_map<class_NoiseTexture2D_property_as_normal_map>`               | ``false`` |
+---------------------------------+---------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`       | :ref:`bump_strength<class_NoiseTexture2D_property_bump_strength>`               | ``8.0``   |
+---------------------------------+---------------------------------------------------------------------------------+-----------+
| :ref:`Gradient<class_Gradient>` | :ref:`color_ramp<class_NoiseTexture2D_property_color_ramp>`                     |           |
+---------------------------------+---------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`         | :ref:`generate_mipmaps<class_NoiseTexture2D_property_generate_mipmaps>`         | ``true``  |
+---------------------------------+---------------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`           | :ref:`height<class_NoiseTexture2D_property_height>`                             | ``512``   |
+---------------------------------+---------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`         | :ref:`in_3d_space<class_NoiseTexture2D_property_in_3d_space>`                   | ``false`` |
+---------------------------------+---------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`         | :ref:`invert<class_NoiseTexture2D_property_invert>`                             | ``false`` |
+---------------------------------+---------------------------------------------------------------------------------+-----------+
| :ref:`Noise<class_Noise>`       | :ref:`noise<class_NoiseTexture2D_property_noise>`                               |           |
+---------------------------------+---------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`         | :ref:`seamless<class_NoiseTexture2D_property_seamless>`                         | ``false`` |
+---------------------------------+---------------------------------------------------------------------------------+-----------+
| :ref:`float<class_float>`       | :ref:`seamless_blend_skirt<class_NoiseTexture2D_property_seamless_blend_skirt>` | ``0.1``   |
+---------------------------------+---------------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`           | :ref:`width<class_NoiseTexture2D_property_width>`                               | ``512``   |
+---------------------------------+---------------------------------------------------------------------------------+-----------+

Property Descriptions
---------------------

.. _class_NoiseTexture2D_property_as_normal_map:

- :ref:`bool<class_bool>` **as_normal_map**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_as_normal_map(value) |
+-----------+--------------------------+
| *Getter*  | is_normal_map()          |
+-----------+--------------------------+

If ``true``, the resulting texture contains a normal map created from the original noise interpreted as a bump map.

----

.. _class_NoiseTexture2D_property_bump_strength:

- :ref:`float<class_float>` **bump_strength**

+-----------+--------------------------+
| *Default* | ``8.0``                  |
+-----------+--------------------------+
| *Setter*  | set_bump_strength(value) |
+-----------+--------------------------+
| *Getter*  | get_bump_strength()      |
+-----------+--------------------------+

Strength of the bump maps used in this texture. A higher value will make the bump maps appear larger while a lower value will make them appear softer.

----

.. _class_NoiseTexture2D_property_color_ramp:

- :ref:`Gradient<class_Gradient>` **color_ramp**

+----------+-----------------------+
| *Setter* | set_color_ramp(value) |
+----------+-----------------------+
| *Getter* | get_color_ramp()      |
+----------+-----------------------+

A :ref:`Gradient<class_Gradient>` which is used to map the luminance of each pixel to a color value.

----

.. _class_NoiseTexture2D_property_generate_mipmaps:

- :ref:`bool<class_bool>` **generate_mipmaps**

+-----------+-----------------------------+
| *Default* | ``true``                    |
+-----------+-----------------------------+
| *Setter*  | set_generate_mipmaps(value) |
+-----------+-----------------------------+
| *Getter*  | is_generating_mipmaps()     |
+-----------+-----------------------------+

Determines whether mipmaps are generated for this texture.

Enabling this results in less texture aliasing, but the noise texture generation may take longer.

Requires (anisotropic) mipmap filtering to be enabled for a material to have an effect.

----

.. _class_NoiseTexture2D_property_height:

- :ref:`int<class_int>` **height**

+-----------+-------------------+
| *Default* | ``512``           |
+-----------+-------------------+
| *Setter*  | set_height(value) |
+-----------+-------------------+
| *Getter*  | get_height()      |
+-----------+-------------------+

Height of the generated texture.

----

.. _class_NoiseTexture2D_property_in_3d_space:

- :ref:`bool<class_bool>` **in_3d_space**

+-----------+------------------------+
| *Default* | ``false``              |
+-----------+------------------------+
| *Setter*  | set_in_3d_space(value) |
+-----------+------------------------+
| *Getter*  | is_in_3d_space()       |
+-----------+------------------------+

Determines whether the noise image is calculated in 3D space. May result in reduced contrast.

----

.. _class_NoiseTexture2D_property_invert:

- :ref:`bool<class_bool>` **invert**

+-----------+-------------------+
| *Default* | ``false``         |
+-----------+-------------------+
| *Setter*  | set_invert(value) |
+-----------+-------------------+
| *Getter*  | get_invert()      |
+-----------+-------------------+

If ``true``, inverts the noise texture. White becomes black, black becomes white.

----

.. _class_NoiseTexture2D_property_noise:

- :ref:`Noise<class_Noise>` **noise**

+----------+------------------+
| *Setter* | set_noise(value) |
+----------+------------------+
| *Getter* | get_noise()      |
+----------+------------------+

The instance of the :ref:`Noise<class_Noise>` object.

----

.. _class_NoiseTexture2D_property_seamless:

- :ref:`bool<class_bool>` **seamless**

+-----------+---------------------+
| *Default* | ``false``           |
+-----------+---------------------+
| *Setter*  | set_seamless(value) |
+-----------+---------------------+
| *Getter*  | get_seamless()      |
+-----------+---------------------+

If ``true``, a seamless texture is requested from the :ref:`Noise<class_Noise>` resource.

\ **Note:** Seamless noise textures may take longer to generate and/or can have a lower contrast compared to non-seamless noise depending on the used :ref:`Noise<class_Noise>` resource. This is because some implementations use higher dimensions for generating seamless noise.

----

.. _class_NoiseTexture2D_property_seamless_blend_skirt:

- :ref:`float<class_float>` **seamless_blend_skirt**

+-----------+---------------------------------+
| *Default* | ``0.1``                         |
+-----------+---------------------------------+
| *Setter*  | set_seamless_blend_skirt(value) |
+-----------+---------------------------------+
| *Getter*  | get_seamless_blend_skirt()      |
+-----------+---------------------------------+

Used for the default/fallback implementation of the seamless texture generation. It determines the distance over which the seams are blended. High values may result in less details and contrast. See :ref:`Noise<class_Noise>` for further details.

----

.. _class_NoiseTexture2D_property_width:

- :ref:`int<class_int>` **width**

+-----------+------------------+
| *Default* | ``512``          |
+-----------+------------------+
| *Setter*  | set_width(value) |
+-----------+------------------+
| *Getter*  | get_width()      |
+-----------+------------------+

Width of the generated texture.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
