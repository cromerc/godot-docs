:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Shader.xml.

.. _class_Shader:

Shader
======

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`VisualShader<class_VisualShader>`

A custom shader program.

Description
-----------

This class allows you to define a custom shader program that can be used by a :ref:`ShaderMaterial<class_ShaderMaterial>`. Shaders allow you to write your own custom behavior for rendering objects or updating particle information. For a detailed explanation and usage, please see the tutorials linked below.

Tutorials
---------

- :doc:`Shaders documentation index <../tutorials/shaders/index>`

Properties
----------

+-----------------------------+-----------------------------------------+--------+
| :ref:`String<class_String>` | :ref:`code<class_Shader_property_code>` | ``""`` |
+-----------------------------+-----------------------------------------+--------+

Methods
-------

+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Texture2D<class_Texture2D>` | :ref:`get_default_texture_parameter<class_Shader_method_get_default_texture_parameter>` **(** :ref:`StringName<class_StringName>` name, :ref:`int<class_int>` index=0 **)** |const|                                    |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Mode<enum_Shader_Mode>`     | :ref:`get_mode<class_Shader_method_get_mode>` **(** **)** |const|                                                                                                                                                      |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`has_parameter<class_Shader_method_has_parameter>` **(** :ref:`StringName<class_StringName>` name **)** |const|                                                                                                   |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_default_texture_parameter<class_Shader_method_set_default_texture_parameter>` **(** :ref:`StringName<class_StringName>` name, :ref:`Texture2D<class_Texture2D>` texture, :ref:`int<class_int>` index=0 **)** |
+-----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_Shader_Mode:

.. _class_Shader_constant_MODE_SPATIAL:

.. _class_Shader_constant_MODE_CANVAS_ITEM:

.. _class_Shader_constant_MODE_PARTICLES:

.. _class_Shader_constant_MODE_SKY:

.. _class_Shader_constant_MODE_FOG:

enum **Mode**:

- **MODE_SPATIAL** = **0** --- Mode used to draw all 3D objects.

- **MODE_CANVAS_ITEM** = **1** --- Mode used to draw all 2D objects.

- **MODE_PARTICLES** = **2** --- Mode used to calculate particle information on a per-particle basis. Not used for drawing.

- **MODE_SKY** = **3** --- Mode used for drawing skies. Only works with shaders attached to :ref:`Sky<class_Sky>` objects.

- **MODE_FOG** = **4** --- Mode used for setting the color and density of volumetric fog effect.

Property Descriptions
---------------------

.. _class_Shader_property_code:

- :ref:`String<class_String>` **code**

+-----------+-----------------+
| *Default* | ``""``          |
+-----------+-----------------+
| *Setter*  | set_code(value) |
+-----------+-----------------+
| *Getter*  | get_code()      |
+-----------+-----------------+

Returns the shader's code as the user has written it, not the full generated code used internally.

Method Descriptions
-------------------

.. _class_Shader_method_get_default_texture_parameter:

- :ref:`Texture2D<class_Texture2D>` **get_default_texture_parameter** **(** :ref:`StringName<class_StringName>` name, :ref:`int<class_int>` index=0 **)** |const|

Returns the texture that is set as default for the specified parameter.

\ **Note:** ``name`` must match the name of the uniform in the code exactly.

\ **Note:** If the sampler array is used use ``index`` to access the specified texture.

----

.. _class_Shader_method_get_mode:

- :ref:`Mode<enum_Shader_Mode>` **get_mode** **(** **)** |const|

Returns the shader mode for the shader, either :ref:`MODE_CANVAS_ITEM<class_Shader_constant_MODE_CANVAS_ITEM>`, :ref:`MODE_SPATIAL<class_Shader_constant_MODE_SPATIAL>` or :ref:`MODE_PARTICLES<class_Shader_constant_MODE_PARTICLES>`.

----

.. _class_Shader_method_has_parameter:

- :ref:`bool<class_bool>` **has_parameter** **(** :ref:`StringName<class_StringName>` name **)** |const|

Returns ``true`` if the shader has this param defined as a uniform in its code.

\ **Note:** ``name`` must match the name of the uniform in the code exactly.

----

.. _class_Shader_method_set_default_texture_parameter:

- void **set_default_texture_parameter** **(** :ref:`StringName<class_StringName>` name, :ref:`Texture2D<class_Texture2D>` texture, :ref:`int<class_int>` index=0 **)**

Sets the default texture to be used with a texture uniform. The default is used if a texture is not set in the :ref:`ShaderMaterial<class_ShaderMaterial>`.

\ **Note:** ``name`` must match the name of the uniform in the code exactly.

\ **Note:** If the sampler array is used use ``index`` to access the specified texture.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
