:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/MenuBar.xml.

.. _class_MenuBar:

MenuBar
=======

**Inherits:** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

A horizontal menu bar, which displays :ref:`PopupMenu<class_PopupMenu>`\ s or system global menu.

Description
-----------

New items can be created by adding :ref:`PopupMenu<class_PopupMenu>` nodes to his node.

Properties
----------

+--------------------------------------------------+----------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                          | :ref:`flat<class_MenuBar_property_flat>`                             | ``false`` |
+--------------------------------------------------+----------------------------------------------------------------------+-----------+
| :ref:`String<class_String>`                      | :ref:`language<class_MenuBar_property_language>`                     | ``""``    |
+--------------------------------------------------+----------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                          | :ref:`prefer_global_menu<class_MenuBar_property_prefer_global_menu>` | ``true``  |
+--------------------------------------------------+----------------------------------------------------------------------+-----------+
| :ref:`Node<class_Node>`                          | :ref:`shortcut_context<class_MenuBar_property_shortcut_context>`     |           |
+--------------------------------------------------+----------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`                            | :ref:`start_index<class_MenuBar_property_start_index>`               | ``-1``    |
+--------------------------------------------------+----------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`                          | :ref:`switch_on_hover<class_MenuBar_property_switch_on_hover>`       | ``true``  |
+--------------------------------------------------+----------------------------------------------------------------------+-----------+
| :ref:`TextDirection<enum_Control_TextDirection>` | :ref:`text_direction<class_MenuBar_property_text_direction>`         | ``0``     |
+--------------------------------------------------+----------------------------------------------------------------------+-----------+

Methods
-------

+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`             | :ref:`get_menu_count<class_MenuBar_method_get_menu_count>` **(** **)** |const|                                                             |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PopupMenu<class_PopupMenu>` | :ref:`get_menu_popup<class_MenuBar_method_get_menu_popup>` **(** :ref:`int<class_int>` menu **)** |const|                                  |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`       | :ref:`get_menu_title<class_MenuBar_method_get_menu_title>` **(** :ref:`int<class_int>` menu **)** |const|                                  |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`       | :ref:`get_menu_tooltip<class_MenuBar_method_get_menu_tooltip>` **(** :ref:`int<class_int>` menu **)** |const|                              |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_menu_disabled<class_MenuBar_method_is_menu_disabled>` **(** :ref:`int<class_int>` menu **)** |const|                              |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_menu_hidden<class_MenuBar_method_is_menu_hidden>` **(** :ref:`int<class_int>` menu **)** |const|                                  |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`is_native_menu<class_MenuBar_method_is_native_menu>` **(** **)** |const|                                                             |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_disable_shortcuts<class_MenuBar_method_set_disable_shortcuts>` **(** :ref:`bool<class_bool>` disabled **)**                      |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_menu_disabled<class_MenuBar_method_set_menu_disabled>` **(** :ref:`int<class_int>` menu, :ref:`bool<class_bool>` disabled **)**  |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_menu_hidden<class_MenuBar_method_set_menu_hidden>` **(** :ref:`int<class_int>` menu, :ref:`bool<class_bool>` hidden **)**        |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_menu_title<class_MenuBar_method_set_menu_title>` **(** :ref:`int<class_int>` menu, :ref:`String<class_String>` title **)**       |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_menu_tooltip<class_MenuBar_method_set_menu_tooltip>` **(** :ref:`int<class_int>` menu, :ref:`String<class_String>` tooltip **)** |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+

Theme Properties
----------------

+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_color<class_MenuBar_theme_color_font_color>`                             | ``Color(0.875, 0.875, 0.875, 1)``   |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_disabled_color<class_MenuBar_theme_color_font_disabled_color>`           | ``Color(0.875, 0.875, 0.875, 0.5)`` |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_focus_color<class_MenuBar_theme_color_font_focus_color>`                 | ``Color(0.95, 0.95, 0.95, 1)``      |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_hover_color<class_MenuBar_theme_color_font_hover_color>`                 | ``Color(0.95, 0.95, 0.95, 1)``      |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_hover_pressed_color<class_MenuBar_theme_color_font_hover_pressed_color>` | ``Color(1, 1, 1, 1)``               |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_outline_color<class_MenuBar_theme_color_font_outline_color>`             | ``Color(1, 1, 1, 1)``               |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_pressed_color<class_MenuBar_theme_color_font_pressed_color>`             | ``Color(1, 1, 1, 1)``               |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`int<class_int>`           | :ref:`h_separation<class_MenuBar_theme_constant_h_separation>`                      | ``4``                               |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`int<class_int>`           | :ref:`outline_size<class_MenuBar_theme_constant_outline_size>`                      | ``0``                               |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`Font<class_Font>`         | :ref:`font<class_MenuBar_theme_font_font>`                                          |                                     |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`int<class_int>`           | :ref:`font_size<class_MenuBar_theme_font_size_font_size>`                           |                                     |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`disabled<class_MenuBar_theme_style_disabled>`                                 |                                     |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`focus<class_MenuBar_theme_style_focus>`                                       |                                     |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`hover<class_MenuBar_theme_style_hover>`                                       |                                     |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`normal<class_MenuBar_theme_style_normal>`                                     |                                     |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`pressed<class_MenuBar_theme_style_pressed>`                                   |                                     |
+---------------------------------+-------------------------------------------------------------------------------------+-------------------------------------+

Property Descriptions
---------------------

.. _class_MenuBar_property_flat:

- :ref:`bool<class_bool>` **flat**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_flat(value) |
+-----------+-----------------+
| *Getter*  | is_flat()       |
+-----------+-----------------+

Flat ``MenuBar`` don't display item decoration.

----

.. _class_MenuBar_property_language:

- :ref:`String<class_String>` **language**

+-----------+---------------------+
| *Default* | ``""``              |
+-----------+---------------------+
| *Setter*  | set_language(value) |
+-----------+---------------------+
| *Getter*  | get_language()      |
+-----------+---------------------+

Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead.

----

.. _class_MenuBar_property_prefer_global_menu:

- :ref:`bool<class_bool>` **prefer_global_menu**

+-----------+-------------------------------+
| *Default* | ``true``                      |
+-----------+-------------------------------+
| *Setter*  | set_prefer_global_menu(value) |
+-----------+-------------------------------+
| *Getter*  | is_prefer_global_menu()       |
+-----------+-------------------------------+

If ``true``, ``MenuBar`` will use system global menu when supported.

----

.. _class_MenuBar_property_shortcut_context:

- :ref:`Node<class_Node>` **shortcut_context**

+----------+-----------------------------+
| *Setter* | set_shortcut_context(value) |
+----------+-----------------------------+
| *Getter* | get_shortcut_context()      |
+----------+-----------------------------+

The :ref:`Node<class_Node>` which must be a parent of the focused GUI :ref:`Control<class_Control>` for the shortcut to be activated. If ``null``, the shortcut can be activated when any control is focused (a global shortcut). This allows shortcuts to be accepted only when the user has a certain area of the GUI focused.

----

.. _class_MenuBar_property_start_index:

- :ref:`int<class_int>` **start_index**

+-----------+------------------------+
| *Default* | ``-1``                 |
+-----------+------------------------+
| *Setter*  | set_start_index(value) |
+-----------+------------------------+
| *Getter*  | get_start_index()      |
+-----------+------------------------+

Position in the global menu to insert first ``MenuBar`` item at.

----

.. _class_MenuBar_property_switch_on_hover:

- :ref:`bool<class_bool>` **switch_on_hover**

+-----------+----------------------------+
| *Default* | ``true``                   |
+-----------+----------------------------+
| *Setter*  | set_switch_on_hover(value) |
+-----------+----------------------------+
| *Getter*  | is_switch_on_hover()       |
+-----------+----------------------------+

If ``true``, when the cursor hovers above menu item, it will close the current :ref:`PopupMenu<class_PopupMenu>` and open the other one.

----

.. _class_MenuBar_property_text_direction:

- :ref:`TextDirection<enum_Control_TextDirection>` **text_direction**

+-----------+---------------------------+
| *Default* | ``0``                     |
+-----------+---------------------------+
| *Setter*  | set_text_direction(value) |
+-----------+---------------------------+
| *Getter*  | get_text_direction()      |
+-----------+---------------------------+

Base text writing direction.

Method Descriptions
-------------------

.. _class_MenuBar_method_get_menu_count:

- :ref:`int<class_int>` **get_menu_count** **(** **)** |const|

Returns number of menu items.

----

.. _class_MenuBar_method_get_menu_popup:

- :ref:`PopupMenu<class_PopupMenu>` **get_menu_popup** **(** :ref:`int<class_int>` menu **)** |const|

Returns :ref:`PopupMenu<class_PopupMenu>` associated with menu item.

----

.. _class_MenuBar_method_get_menu_title:

- :ref:`String<class_String>` **get_menu_title** **(** :ref:`int<class_int>` menu **)** |const|

Returns menu item title.

----

.. _class_MenuBar_method_get_menu_tooltip:

- :ref:`String<class_String>` **get_menu_tooltip** **(** :ref:`int<class_int>` menu **)** |const|

Returns menu item tooltip.

----

.. _class_MenuBar_method_is_menu_disabled:

- :ref:`bool<class_bool>` **is_menu_disabled** **(** :ref:`int<class_int>` menu **)** |const|

Returns ``true``, if menu item is disabled.

----

.. _class_MenuBar_method_is_menu_hidden:

- :ref:`bool<class_bool>` **is_menu_hidden** **(** :ref:`int<class_int>` menu **)** |const|

Returns ``true``, if menu item is hidden.

----

.. _class_MenuBar_method_is_native_menu:

- :ref:`bool<class_bool>` **is_native_menu** **(** **)** |const|

Returns ``true``, if system global menu is supported and used by this ``MenuBar``.

----

.. _class_MenuBar_method_set_disable_shortcuts:

- void **set_disable_shortcuts** **(** :ref:`bool<class_bool>` disabled **)**

If ``true``, shortcuts are disabled and cannot be used to trigger the button.

----

.. _class_MenuBar_method_set_menu_disabled:

- void **set_menu_disabled** **(** :ref:`int<class_int>` menu, :ref:`bool<class_bool>` disabled **)**

If ``true``, menu item is disabled.

----

.. _class_MenuBar_method_set_menu_hidden:

- void **set_menu_hidden** **(** :ref:`int<class_int>` menu, :ref:`bool<class_bool>` hidden **)**

If ``true``, menu item is hidden.

----

.. _class_MenuBar_method_set_menu_title:

- void **set_menu_title** **(** :ref:`int<class_int>` menu, :ref:`String<class_String>` title **)**

Sets menu item title.

----

.. _class_MenuBar_method_set_menu_tooltip:

- void **set_menu_tooltip** **(** :ref:`int<class_int>` menu, :ref:`String<class_String>` tooltip **)**

Sets menu item tooltip.

Theme Property Descriptions
---------------------------

.. _class_MenuBar_theme_color_font_color:

- :ref:`Color<class_Color>` **font_color**

+-----------+-----------------------------------+
| *Default* | ``Color(0.875, 0.875, 0.875, 1)`` |
+-----------+-----------------------------------+

Default text :ref:`Color<class_Color>` of the menu item.

----

.. _class_MenuBar_theme_color_font_disabled_color:

- :ref:`Color<class_Color>` **font_disabled_color**

+-----------+-------------------------------------+
| *Default* | ``Color(0.875, 0.875, 0.875, 0.5)`` |
+-----------+-------------------------------------+

Text :ref:`Color<class_Color>` used when the menu item is disabled.

----

.. _class_MenuBar_theme_color_font_focus_color:

- :ref:`Color<class_Color>` **font_focus_color**

+-----------+--------------------------------+
| *Default* | ``Color(0.95, 0.95, 0.95, 1)`` |
+-----------+--------------------------------+

Text :ref:`Color<class_Color>` used when the menu item is focused. Only replaces the normal text color of the menu item. Disabled, hovered, and pressed states take precedence over this color.

----

.. _class_MenuBar_theme_color_font_hover_color:

- :ref:`Color<class_Color>` **font_hover_color**

+-----------+--------------------------------+
| *Default* | ``Color(0.95, 0.95, 0.95, 1)`` |
+-----------+--------------------------------+

Text :ref:`Color<class_Color>` used when the menu item is being hovered.

----

.. _class_MenuBar_theme_color_font_hover_pressed_color:

- :ref:`Color<class_Color>` **font_hover_pressed_color**

+-----------+-----------------------+
| *Default* | ``Color(1, 1, 1, 1)`` |
+-----------+-----------------------+

Text :ref:`Color<class_Color>` used when the menu item is being hovered and pressed.

----

.. _class_MenuBar_theme_color_font_outline_color:

- :ref:`Color<class_Color>` **font_outline_color**

+-----------+-----------------------+
| *Default* | ``Color(1, 1, 1, 1)`` |
+-----------+-----------------------+

The tint of text outline of the menu item.

----

.. _class_MenuBar_theme_color_font_pressed_color:

- :ref:`Color<class_Color>` **font_pressed_color**

+-----------+-----------------------+
| *Default* | ``Color(1, 1, 1, 1)`` |
+-----------+-----------------------+

Text :ref:`Color<class_Color>` used when the menu item is being pressed.

----

.. _class_MenuBar_theme_constant_h_separation:

- :ref:`int<class_int>` **h_separation**

+-----------+-------+
| *Default* | ``4`` |
+-----------+-------+

The horizontal space between menu items.

----

.. _class_MenuBar_theme_constant_outline_size:

- :ref:`int<class_int>` **outline_size**

+-----------+-------+
| *Default* | ``0`` |
+-----------+-------+

The size of the text outline.

----

.. _class_MenuBar_theme_font_font:

- :ref:`Font<class_Font>` **font**

:ref:`Font<class_Font>` of the menu item's text.

----

.. _class_MenuBar_theme_font_size_font_size:

- :ref:`int<class_int>` **font_size**

Font size of the menu item's text.

----

.. _class_MenuBar_theme_style_disabled:

- :ref:`StyleBox<class_StyleBox>` **disabled**

:ref:`StyleBox<class_StyleBox>` used when the menu item is disabled.

----

.. _class_MenuBar_theme_style_focus:

- :ref:`StyleBox<class_StyleBox>` **focus**

:ref:`StyleBox<class_StyleBox>` used when the menu item is focused. The ``focus`` :ref:`StyleBox<class_StyleBox>` is displayed *over* the base :ref:`StyleBox<class_StyleBox>`, so a partially transparent :ref:`StyleBox<class_StyleBox>` should be used to ensure the base :ref:`StyleBox<class_StyleBox>` remains visible. A :ref:`StyleBox<class_StyleBox>` that represents an outline or an underline works well for this purpose. To disable the focus visual effect, assign a :ref:`StyleBoxEmpty<class_StyleBoxEmpty>` resource. Note that disabling the focus visual effect will harm keyboard/controller navigation usability, so this is not recommended for accessibility reasons.

----

.. _class_MenuBar_theme_style_hover:

- :ref:`StyleBox<class_StyleBox>` **hover**

:ref:`StyleBox<class_StyleBox>` used when the menu item is being hovered.

----

.. _class_MenuBar_theme_style_normal:

- :ref:`StyleBox<class_StyleBox>` **normal**

Default :ref:`StyleBox<class_StyleBox>` for the menu item.

----

.. _class_MenuBar_theme_style_pressed:

- :ref:`StyleBox<class_StyleBox>` **pressed**

:ref:`StyleBox<class_StyleBox>` used when the menu item is being pressed.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
