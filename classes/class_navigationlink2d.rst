:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/NavigationLink2D.xml.

.. _class_NavigationLink2D:

NavigationLink2D
================

**Inherits:** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Creates a link between two locations that :ref:`NavigationServer2D<class_NavigationServer2D>` can route agents through.

Description
-----------

Creates a link between two locations that :ref:`NavigationServer2D<class_NavigationServer2D>` can route agents through.  Links can be used to express navigation methods that aren't just traveling along the surface of the navigation mesh, like zip-lines, teleporters, or jumping across gaps.

Properties
----------

+-------------------------------+-----------------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`       | :ref:`bidirectional<class_NavigationLink2D_property_bidirectional>`         | ``true``          |
+-------------------------------+-----------------------------------------------------------------------------+-------------------+
| :ref:`bool<class_bool>`       | :ref:`enabled<class_NavigationLink2D_property_enabled>`                     | ``true``          |
+-------------------------------+-----------------------------------------------------------------------------+-------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`end_location<class_NavigationLink2D_property_end_location>`           | ``Vector2(0, 0)`` |
+-------------------------------+-----------------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`     | :ref:`enter_cost<class_NavigationLink2D_property_enter_cost>`               | ``0.0``           |
+-------------------------------+-----------------------------------------------------------------------------+-------------------+
| :ref:`int<class_int>`         | :ref:`navigation_layers<class_NavigationLink2D_property_navigation_layers>` | ``1``             |
+-------------------------------+-----------------------------------------------------------------------------+-------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`start_location<class_NavigationLink2D_property_start_location>`       | ``Vector2(0, 0)`` |
+-------------------------------+-----------------------------------------------------------------------------+-------------------+
| :ref:`float<class_float>`     | :ref:`travel_cost<class_NavigationLink2D_property_travel_cost>`             | ``1.0``           |
+-------------------------------+-----------------------------------------------------------------------------+-------------------+

Methods
-------

+-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`get_navigation_layer_value<class_NavigationLink2D_method_get_navigation_layer_value>` **(** :ref:`int<class_int>` layer_number **)** |const|                        |
+-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                    | :ref:`set_navigation_layer_value<class_NavigationLink2D_method_set_navigation_layer_value>` **(** :ref:`int<class_int>` layer_number, :ref:`bool<class_bool>` value **)** |
+-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_NavigationLink2D_property_bidirectional:

- :ref:`bool<class_bool>` **bidirectional**

+-----------+--------------------------+
| *Default* | ``true``                 |
+-----------+--------------------------+
| *Setter*  | set_bidirectional(value) |
+-----------+--------------------------+
| *Getter*  | is_bidirectional()       |
+-----------+--------------------------+

Whether this link can be traveled in both directions or only from :ref:`start_location<class_NavigationLink2D_property_start_location>` to :ref:`end_location<class_NavigationLink2D_property_end_location>`.

----

.. _class_NavigationLink2D_property_enabled:

- :ref:`bool<class_bool>` **enabled**

+-----------+--------------------+
| *Default* | ``true``           |
+-----------+--------------------+
| *Setter*  | set_enabled(value) |
+-----------+--------------------+
| *Getter*  | is_enabled()       |
+-----------+--------------------+

Whether this link is currently active. If ``false``, :ref:`NavigationServer2D.map_get_path<class_NavigationServer2D_method_map_get_path>` will ignore this link.

----

.. _class_NavigationLink2D_property_end_location:

- :ref:`Vector2<class_Vector2>` **end_location**

+-----------+-------------------------+
| *Default* | ``Vector2(0, 0)``       |
+-----------+-------------------------+
| *Setter*  | set_end_location(value) |
+-----------+-------------------------+
| *Getter*  | get_end_location()      |
+-----------+-------------------------+

Ending position of the link.

This position will search out the nearest polygon in the navigation mesh to attach to.

The distance the link will search is controlled by :ref:`NavigationServer2D.map_set_link_connection_radius<class_NavigationServer2D_method_map_set_link_connection_radius>`.

----

.. _class_NavigationLink2D_property_enter_cost:

- :ref:`float<class_float>` **enter_cost**

+-----------+-----------------------+
| *Default* | ``0.0``               |
+-----------+-----------------------+
| *Setter*  | set_enter_cost(value) |
+-----------+-----------------------+
| *Getter*  | get_enter_cost()      |
+-----------+-----------------------+

When pathfinding enters this link from another regions navmesh the ``enter_cost`` value is added to the path distance for determining the shortest path.

----

.. _class_NavigationLink2D_property_navigation_layers:

- :ref:`int<class_int>` **navigation_layers**

+-----------+------------------------------+
| *Default* | ``1``                        |
+-----------+------------------------------+
| *Setter*  | set_navigation_layers(value) |
+-----------+------------------------------+
| *Getter*  | get_navigation_layers()      |
+-----------+------------------------------+

A bitfield determining all navigation layers the link belongs to. These navigation layers will be checked when requesting a path with :ref:`NavigationServer2D.map_get_path<class_NavigationServer2D_method_map_get_path>`.

----

.. _class_NavigationLink2D_property_start_location:

- :ref:`Vector2<class_Vector2>` **start_location**

+-----------+---------------------------+
| *Default* | ``Vector2(0, 0)``         |
+-----------+---------------------------+
| *Setter*  | set_start_location(value) |
+-----------+---------------------------+
| *Getter*  | get_start_location()      |
+-----------+---------------------------+

Starting position of the link.

This position will search out the nearest polygon in the navigation mesh to attach to.

The distance the link will search is controlled by :ref:`NavigationServer2D.map_set_link_connection_radius<class_NavigationServer2D_method_map_set_link_connection_radius>`.

----

.. _class_NavigationLink2D_property_travel_cost:

- :ref:`float<class_float>` **travel_cost**

+-----------+------------------------+
| *Default* | ``1.0``                |
+-----------+------------------------+
| *Setter*  | set_travel_cost(value) |
+-----------+------------------------+
| *Getter*  | get_travel_cost()      |
+-----------+------------------------+

When pathfinding moves along the link the traveled distance is multiplied with ``travel_cost`` for determining the shortest path.

Method Descriptions
-------------------

.. _class_NavigationLink2D_method_get_navigation_layer_value:

- :ref:`bool<class_bool>` **get_navigation_layer_value** **(** :ref:`int<class_int>` layer_number **)** |const|

Returns whether or not the specified layer of the :ref:`navigation_layers<class_NavigationLink2D_property_navigation_layers>` bitmask is enabled, given a ``layer_number`` between 1 and 32.

----

.. _class_NavigationLink2D_method_set_navigation_layer_value:

- void **set_navigation_layer_value** **(** :ref:`int<class_int>` layer_number, :ref:`bool<class_bool>` value **)**

Based on ``value``, enables or disables the specified layer in the :ref:`navigation_layers<class_NavigationLink2D_property_navigation_layers>` bitmask, given a ``layer_number`` between 1 and 32.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
