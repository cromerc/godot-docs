:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/modules/gdscript/doc_classes/@GDScript.xml.

.. _class_@GDScript:

@GDScript
=========

Built-in GDScript functions.

Description
-----------

A list of GDScript-specific utility functions accessed in any script.

For the list of the global functions and constants see :ref:`@GlobalScope<class_@GlobalScope>`.

Tutorials
---------

- :doc:`GDScript exports <../tutorials/scripting/gdscript/gdscript_exports>`

Methods
-------

+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`           | :ref:`Color8<class_@GDScript_method_Color8>` **(** :ref:`int<class_int>` r8, :ref:`int<class_int>` g8, :ref:`int<class_int>` b8, :ref:`int<class_int>` a8=255 **)** |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`assert<class_@GDScript_method_assert>` **(** :ref:`bool<class_bool>` condition, :ref:`String<class_String>` message="" **)**                                  |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`         | :ref:`char<class_@GDScript_method_char>` **(** :ref:`int<class_int>` char **)**                                                                                     |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`       | :ref:`convert<class_@GDScript_method_convert>` **(** :ref:`Variant<class_Variant>` what, :ref:`int<class_int>` type **)**                                           |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_Object>`         | :ref:`dict_to_inst<class_@GDScript_method_dict_to_inst>` **(** :ref:`Dictionary<class_Dictionary>` dictionary **)**                                                 |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`get_stack<class_@GDScript_method_get_stack>` **(** **)**                                                                                                      |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`inst_to_dict<class_@GDScript_method_inst_to_dict>` **(** :ref:`Object<class_Object>` instance **)**                                                           |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`               | :ref:`len<class_@GDScript_method_len>` **(** :ref:`Variant<class_Variant>` var **)**                                                                                |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Resource<class_Resource>`     | :ref:`load<class_@GDScript_method_load>` **(** :ref:`String<class_String>` path **)**                                                                               |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Resource<class_Resource>`     | :ref:`preload<class_@GDScript_method_preload>` **(** :ref:`String<class_String>` path **)**                                                                         |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`print_debug<class_@GDScript_method_print_debug>` **(** ... **)** |vararg|                                                                                     |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`print_stack<class_@GDScript_method_print_stack>` **(** **)**                                                                                                  |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`range<class_@GDScript_method_range>` **(** ... **)** |vararg|                                                                                                 |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`         | :ref:`str<class_@GDScript_method_str>` **(** ... **)** |vararg|                                                                                                     |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`type_exists<class_@GDScript_method_type_exists>` **(** :ref:`StringName<class_StringName>` type **)**                                                         |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Constants
---------

.. _class_@GDScript_constant_PI:

.. _class_@GDScript_constant_TAU:

.. _class_@GDScript_constant_INF:

.. _class_@GDScript_constant_NAN:

- **PI** = **3.14159265358979** --- Constant that represents how many times the diameter of a circle fits around its perimeter. This is equivalent to ``TAU / 2``, or 180 degrees in rotations.

- **TAU** = **6.28318530717959** --- The circle constant, the circumference of the unit circle in radians. This is equivalent to ``PI * 2``, or 360 degrees in rotations.

- **INF** = **inf** --- Positive floating-point infinity. This is the result of floating-point division when the divisor is ``0.0``. For negative infinity, use ``-INF``. Dividing by ``-0.0`` will result in negative infinity if the numerator is positive, so dividing by ``0.0`` is not the same as dividing by ``-0.0`` (despite ``0.0 == -0.0`` returning ``true``).

\ **Note:** Numeric infinity is only a concept with floating-point numbers, and has no equivalent for integers. Dividing an integer number by ``0`` will not result in :ref:`INF<class_@GDScript_constant_INF>` and will result in a run-time error instead.

- **NAN** = **nan** --- "Not a Number", an invalid floating-point value. :ref:`NAN<class_@GDScript_constant_NAN>` has special properties, including that it is not equal to itself (``NAN == NAN`` returns ``false``). It is output by some invalid operations, such as dividing floating-point ``0.0`` by ``0.0``.

\ **Note:** "Not a Number" is only a concept with floating-point numbers, and has no equivalent for integers. Dividing an integer ``0`` by ``0`` will not result in :ref:`NAN<class_@GDScript_constant_NAN>` and will result in a run-time error instead.

Annotations
-----------

.. _class_@GDScript_annotation_@export:

- **@export** **(** **)**

Mark the following property as exported (editable in the Inspector dock and saved to disk). To control the type of the exported property use the type hint notation.

::

    @export var int_number = 5
    @export var float_number: float = 5

----

.. _class_@GDScript_annotation_@export_category:

- **@export_category** **(** :ref:`String<class_String>` name **)**

Define a new category for the following exported properties. This helps to organize properties in the Inspector dock.

See also :ref:`@GlobalScope.PROPERTY_USAGE_CATEGORY<class_@GlobalScope_constant_PROPERTY_USAGE_CATEGORY>`.

::

    @export_category("My Properties")
    @export var number = 3
    @export var string = ""

\ **Note:** Categories in the property list are supposed to indicate different base types, so the use of this annotation is not encouraged. See :ref:`@export_group<class_@GDScript_annotation_@export_group>` and :ref:`@export_subgroup<class_@GDScript_annotation_@export_subgroup>` instead.

----

.. _class_@GDScript_annotation_@export_color_no_alpha:

- **@export_color_no_alpha** **(** **)**

Export a :ref:`Color<class_Color>` property without an alpha (fixed as ``1.0``).

See also :ref:`@GlobalScope.PROPERTY_HINT_COLOR_NO_ALPHA<class_@GlobalScope_constant_PROPERTY_HINT_COLOR_NO_ALPHA>`.

::

    @export_color_no_alpha var modulate_color: Color

----

.. _class_@GDScript_annotation_@export_dir:

- **@export_dir** **(** **)**

Export a :ref:`String<class_String>` property as a path to a directory. The path will be limited to the project folder and its subfolders. See :ref:`@export_global_dir<class_@GDScript_annotation_@export_global_dir>` to allow picking from the entire filesystem.

See also :ref:`@GlobalScope.PROPERTY_HINT_DIR<class_@GlobalScope_constant_PROPERTY_HINT_DIR>`.

::

    @export_dir var sprite_folder: String

----

.. _class_@GDScript_annotation_@export_enum:

- **@export_enum** **(** :ref:`String<class_String>` names, ... **)** |vararg|

Export a :ref:`String<class_String>` or integer property as an enumerated list of options. If the property is an integer field, then the index of the value is stored, in the same order the values are provided. You can add specific identifiers for allowed values using a colon.

See also :ref:`@GlobalScope.PROPERTY_HINT_ENUM<class_@GlobalScope_constant_PROPERTY_HINT_ENUM>`.

::

    @export_enum("Rebecca", "Mary", "Leah") var character_name: String
    @export_enum("Warrior", "Magician", "Thief") var character_class: int
    @export_enum("Walking:30", "Running:60", "Riding:200") var character_speed: int

----

.. _class_@GDScript_annotation_@export_exp_easing:

- **@export_exp_easing** **(** :ref:`String<class_String>` hints="", ... **)** |vararg|

Export a floating-point property with an easing editor widget. Additional hints can be provided to adjust the behavior of the widget. ``"attenuation"`` flips the curve, which makes it more intuitive for editing attenuation properties. ``"positive_only"`` limits values to only be greater than or equal to zero.

See also :ref:`@GlobalScope.PROPERTY_HINT_EXP_EASING<class_@GlobalScope_constant_PROPERTY_HINT_EXP_EASING>`.

::

    @export_exp_easing var transition_speed
    @export_exp_easing("attenuation") var fading_attenuation
    @export_exp_easing("positive_only") var effect_power

----

.. _class_@GDScript_annotation_@export_file:

- **@export_file** **(** :ref:`String<class_String>` filter="", ... **)** |vararg|

Export a :ref:`String<class_String>` property as a path to a file. The path will be limited to the project folder and its subfolders. See :ref:`@export_global_file<class_@GDScript_annotation_@export_global_file>` to allow picking from the entire filesystem.

If ``filter`` is provided, only matching files will be available for picking.

See also :ref:`@GlobalScope.PROPERTY_HINT_FILE<class_@GlobalScope_constant_PROPERTY_HINT_FILE>`.

::

    @export_file var sound_effect_file: String
    @export_file("*.txt") var notes_file: String

----

.. _class_@GDScript_annotation_@export_flags:

- **@export_flags** **(** :ref:`String<class_String>` names, ... **)** |vararg|

Export an integer property as a bit flag field. This allows to store several "checked" or ``true`` values with one property, and comfortably select them from the Inspector dock.

See also :ref:`@GlobalScope.PROPERTY_HINT_FLAGS<class_@GlobalScope_constant_PROPERTY_HINT_FLAGS>`.

::

    @export_flags("Fire", "Water", "Earth", "Wind") var spell_elements = 0

----

.. _class_@GDScript_annotation_@export_flags_2d_navigation:

- **@export_flags_2d_navigation** **(** **)**

Export an integer property as a bit flag field for 2D navigation layers. The widget in the Inspector dock will use the layer names defined in :ref:`ProjectSettings.layer_names/2d_navigation/layer_1<class_ProjectSettings_property_layer_names/2d_navigation/layer_1>`.

See also :ref:`@GlobalScope.PROPERTY_HINT_LAYERS_2D_NAVIGATION<class_@GlobalScope_constant_PROPERTY_HINT_LAYERS_2D_NAVIGATION>`.

::

    @export_flags_2d_navigation var navigation_layers: int

----

.. _class_@GDScript_annotation_@export_flags_2d_physics:

- **@export_flags_2d_physics** **(** **)**

Export an integer property as a bit flag field for 2D physics layers. The widget in the Inspector dock will use the layer names defined in :ref:`ProjectSettings.layer_names/2d_physics/layer_1<class_ProjectSettings_property_layer_names/2d_physics/layer_1>`.

See also :ref:`@GlobalScope.PROPERTY_HINT_LAYERS_2D_PHYSICS<class_@GlobalScope_constant_PROPERTY_HINT_LAYERS_2D_PHYSICS>`.

::

    @export_flags_2d_physics var physics_layers: int

----

.. _class_@GDScript_annotation_@export_flags_2d_render:

- **@export_flags_2d_render** **(** **)**

Export an integer property as a bit flag field for 2D render layers. The widget in the Inspector dock will use the layer names defined in :ref:`ProjectSettings.layer_names/2d_render/layer_1<class_ProjectSettings_property_layer_names/2d_render/layer_1>`.

See also :ref:`@GlobalScope.PROPERTY_HINT_LAYERS_2D_RENDER<class_@GlobalScope_constant_PROPERTY_HINT_LAYERS_2D_RENDER>`.

::

    @export_flags_2d_render var render_layers: int

----

.. _class_@GDScript_annotation_@export_flags_3d_navigation:

- **@export_flags_3d_navigation** **(** **)**

Export an integer property as a bit flag field for 3D navigation layers. The widget in the Inspector dock will use the layer names defined in :ref:`ProjectSettings.layer_names/3d_navigation/layer_1<class_ProjectSettings_property_layer_names/3d_navigation/layer_1>`.

See also :ref:`@GlobalScope.PROPERTY_HINT_LAYERS_3D_NAVIGATION<class_@GlobalScope_constant_PROPERTY_HINT_LAYERS_3D_NAVIGATION>`.

::

    @export_flags_3d_navigation var navigation_layers: int

----

.. _class_@GDScript_annotation_@export_flags_3d_physics:

- **@export_flags_3d_physics** **(** **)**

Export an integer property as a bit flag field for 3D physics layers. The widget in the Inspector dock will use the layer names defined in :ref:`ProjectSettings.layer_names/3d_physics/layer_1<class_ProjectSettings_property_layer_names/3d_physics/layer_1>`.

See also :ref:`@GlobalScope.PROPERTY_HINT_LAYERS_3D_PHYSICS<class_@GlobalScope_constant_PROPERTY_HINT_LAYERS_3D_PHYSICS>`.

::

    @export_flags_3d_physics var physics_layers: int

----

.. _class_@GDScript_annotation_@export_flags_3d_render:

- **@export_flags_3d_render** **(** **)**

Export an integer property as a bit flag field for 3D render layers. The widget in the Inspector dock will use the layer names defined in :ref:`ProjectSettings.layer_names/3d_render/layer_1<class_ProjectSettings_property_layer_names/3d_render/layer_1>`.

See also :ref:`@GlobalScope.PROPERTY_HINT_LAYERS_3D_RENDER<class_@GlobalScope_constant_PROPERTY_HINT_LAYERS_3D_RENDER>`.

::

    @export_flags_3d_render var render_layers: int

----

.. _class_@GDScript_annotation_@export_global_dir:

- **@export_global_dir** **(** **)**

Export a :ref:`String<class_String>` property as a path to a directory. The path can be picked from the entire filesystem. See :ref:`@export_dir<class_@GDScript_annotation_@export_dir>` to limit it to the project folder and its subfolders.

See also :ref:`@GlobalScope.PROPERTY_HINT_GLOBAL_DIR<class_@GlobalScope_constant_PROPERTY_HINT_GLOBAL_DIR>`.

::

    @export_global_dir var sprite_folder: String

----

.. _class_@GDScript_annotation_@export_global_file:

- **@export_global_file** **(** :ref:`String<class_String>` filter="", ... **)** |vararg|

Export a :ref:`String<class_String>` property as a path to a file. The path can be picked from the entire filesystem. See :ref:`@export_file<class_@GDScript_annotation_@export_file>` to limit it to the project folder and its subfolders.

If ``filter`` is provided, only matching files will be available for picking.

See also :ref:`@GlobalScope.PROPERTY_HINT_GLOBAL_FILE<class_@GlobalScope_constant_PROPERTY_HINT_GLOBAL_FILE>`.

::

    @export_global_file var sound_effect_file: String
    @export_global_file("*.txt") var notes_file: String

----

.. _class_@GDScript_annotation_@export_group:

- **@export_group** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` prefix="" **)**

Define a new group for the following exported properties. This helps to organize properties in the Inspector dock. Groups can be added with an optional ``prefix``, which would make group to only consider properties that have this prefix. The grouping will break on the first property that doesn't have a prefix. The prefix is also removed from the property's name in the Inspector dock.

If no ``prefix`` is provided, the every following property is added to the group. The group ends when then next group or category is defined. You can also force end a group by using this annotation with empty strings for parameters, ``@export_group("", "")``.

Groups cannot be nested, use :ref:`@export_subgroup<class_@GDScript_annotation_@export_subgroup>` to add subgroups to your groups.

See also :ref:`@GlobalScope.PROPERTY_USAGE_GROUP<class_@GlobalScope_constant_PROPERTY_USAGE_GROUP>`.

::

    @export_group("My Properties")
    @export var number = 3
    @export var string = ""
    
    @export_group("Prefixed Properties", "prefix_")
    @export var prefix_number = 3
    @export var prefix_string = ""
    
    @export_group("", "")
    @export var ungrouped_number = 3

----

.. _class_@GDScript_annotation_@export_multiline:

- **@export_multiline** **(** **)**

Export a :ref:`String<class_String>` property with a large :ref:`TextEdit<class_TextEdit>` widget instead of a :ref:`LineEdit<class_LineEdit>`. This adds support for multiline content and makes it easier to edit large amount of text stored in the property.

See also :ref:`@GlobalScope.PROPERTY_HINT_MULTILINE_TEXT<class_@GlobalScope_constant_PROPERTY_HINT_MULTILINE_TEXT>`.

::

    @export_multiline var character_bio

----

.. _class_@GDScript_annotation_@export_node_path:

- **@export_node_path** **(** :ref:`String<class_String>` type="", ... **)** |vararg|

Export a :ref:`NodePath<class_NodePath>` property with a filter for allowed node types.

See also :ref:`@GlobalScope.PROPERTY_HINT_NODE_PATH_VALID_TYPES<class_@GlobalScope_constant_PROPERTY_HINT_NODE_PATH_VALID_TYPES>`.

::

    @export_node_path(Button, TouchScreenButton) var some_button

----

.. _class_@GDScript_annotation_@export_placeholder:

- **@export_placeholder** **(** :ref:`String<class_String>` placeholder **)**

Export a :ref:`String<class_String>` property with a placeholder text displayed in the editor widget when no value is present.

See also :ref:`@GlobalScope.PROPERTY_HINT_PLACEHOLDER_TEXT<class_@GlobalScope_constant_PROPERTY_HINT_PLACEHOLDER_TEXT>`.

::

    @export_placeholder("Name in lowercase") var character_id: String

----

.. _class_@GDScript_annotation_@export_range:

- **@export_range** **(** :ref:`float<class_float>` min, :ref:`float<class_float>` max, :ref:`float<class_float>` step=1.0, :ref:`String<class_String>` extra_hints="", ... **)** |vararg|

Export a numeric property as a range value. The range must be defined by ``min`` and ``max``, as well as an optional ``step`` and a variety of extra hints. The ``step`` defaults to ``1`` for integer properties. For floating-point numbers this value depends on your ``EditorSettings.interface/inspector/default_float_step`` setting.

If hints ``"or_greater"`` and ``"or_less"`` are provided, the editor widget will not cap the value at range boundaries. The ``"exp"`` hint will make the edited values on range to change exponentially. The ``"hide_slider"`` hint will hide the slider element of the editor widget.

Hints also allow to indicate the units for the edited value. Using ``"radians"`` you can specify that the actual value is in radians, but should be displayed in degrees in the Inspector dock. ``"degrees"`` allows to add a degree sign as a unit suffix. Finally, a custom suffix can be provided using ``"suffix:unit"``, where "unit" can be any string.

See also :ref:`@GlobalScope.PROPERTY_HINT_RANGE<class_@GlobalScope_constant_PROPERTY_HINT_RANGE>`.

::

    @export_range(0, 20) var number
    @export_range(-10, 20) var number
    @export_range(-10, 20, 0.2) var number: float
    
    @export_range(0, 100, 1, "or_greater") var power_percent
    @export_range(0, 100, 1, "or_greater", "or_less") var health_delta
    
    @export_range(-3.14, 3.14, 0.001, "radians") var angle_radians
    @export_range(0, 360, 1, "degrees") var angle_degrees
    @export_range(-8, 8, 2, "suffix:px") var target_offset

----

.. _class_@GDScript_annotation_@export_subgroup:

- **@export_subgroup** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` prefix="" **)**

Define a new subgroup for the following exported properties. This helps to organize properties in the Inspector dock. Subgroups work exactly like groups, except they need a parent group to exist. See :ref:`@export_group<class_@GDScript_annotation_@export_group>`.

See also :ref:`@GlobalScope.PROPERTY_USAGE_SUBGROUP<class_@GlobalScope_constant_PROPERTY_USAGE_SUBGROUP>`.

::

    @export_group("My Properties")
    @export var number = 3
    @export var string = ""
    
    @export_subgroup("My Prefixed Properties", "prefix_")
    @export var prefix_number = 3
    @export var prefix_string = ""

\ **Note:** Subgroups cannot be nested, they only provide one extra level of depth. Just like the next group ends the previous group, so do the subsequent subgroups.

----

.. _class_@GDScript_annotation_@icon:

- **@icon** **(** :ref:`String<class_String>` icon_path **)**

Add a custom icon to the current script. The icon is displayed in the Scene dock for every node that the script is attached to. For named classes the icon is also displayed in various editor dialogs.

::

    @icon("res://path/to/class/icon.svg")

\ **Note:** Only the script can have a custom icon. Inner classes are not supported yet.

----

.. _class_@GDScript_annotation_@onready:

- **@onready** **(** **)**

Mark the following property as assigned on :ref:`Node<class_Node>`'s ready state change. Values for these properties are not assigned immediately upon the node's creation, and instead are computed and stored right before :ref:`Node._ready<class_Node_method__ready>`.

::

    @onready var character_name: Label = $Label

----

.. _class_@GDScript_annotation_@rpc:

- **@rpc** **(** :ref:`String<class_String>` mode="", :ref:`String<class_String>` sync="", :ref:`String<class_String>` transfer_mode="", :ref:`int<class_int>` transfer_channel=0, ... **)** |vararg|

Mark the following method for remote procedure calls. See :doc:`High-level multiplayer <../tutorials/networking/high_level_multiplayer>`.

::

    @rpc()

----

.. _class_@GDScript_annotation_@tool:

- **@tool** **(** **)**

Mark the current script as a tool script, allowing it to be loaded and executed by the editor. See :doc:`Running code in the editor <../tutorials/plugins/running_code_in_the_editor>`.

::

    @tool
    extends Node

----

.. _class_@GDScript_annotation_@warning_ignore:

- **@warning_ignore** **(** :ref:`String<class_String>` warning, ... **)** |vararg|

Mark the following statement to ignore the specified warning. See :doc:`GDScript warning system <../tutorials/scripting/gdscript/warning_system>`.

::

    func test():
        print("hello")
        return
        @warning_ignore("unreachable_code")
        print("unreachable")

Method Descriptions
-------------------

.. _class_@GDScript_method_Color8:

- :ref:`Color<class_Color>` **Color8** **(** :ref:`int<class_int>` r8, :ref:`int<class_int>` g8, :ref:`int<class_int>` b8, :ref:`int<class_int>` a8=255 **)**

Returns a color constructed from integer red, green, blue, and alpha channels. Each channel should have 8 bits of information ranging from 0 to 255.

\ ``r8`` red channel

\ ``g8`` green channel

\ ``b8`` blue channel

\ ``a8`` alpha channel

::

    red = Color8(255, 0, 0)

----

.. _class_@GDScript_method_assert:

- void **assert** **(** :ref:`bool<class_bool>` condition, :ref:`String<class_String>` message="" **)**

Asserts that the ``condition`` is ``true``. If the ``condition`` is ``false``, an error is generated. When running from the editor, the running project will also be paused until you resume it. This can be used as a stronger form of :ref:`@GlobalScope.push_error<class_@GlobalScope_method_push_error>` for reporting errors to project developers or add-on users.

\ **Note:** For performance reasons, the code inside :ref:`assert<class_@GDScript_method_assert>` is only executed in debug builds or when running the project from the editor. Don't include code that has side effects in an :ref:`assert<class_@GDScript_method_assert>` call. Otherwise, the project will behave differently when exported in release mode.

The optional ``message`` argument, if given, is shown in addition to the generic "Assertion failed" message. It must be a static string, so format strings can't be used. You can use this to provide additional details about why the assertion failed.

::

    # Imagine we always want speed to be between 0 and 20.
    var speed = -10
    assert(speed < 20) # True, the program will continue
    assert(speed >= 0) # False, the program will stop
    assert(speed >= 0 and speed < 20) # You can also combine the two conditional statements in one check
    assert(speed < 20, "the speed limit is 20") # Show a message

----

.. _class_@GDScript_method_char:

- :ref:`String<class_String>` **char** **(** :ref:`int<class_int>` char **)**

Returns a character as a String of the given Unicode code point (which is compatible with ASCII code).

::

    a = char(65)      # a is "A"
    a = char(65 + 32) # a is "a"
    a = char(8364)    # a is "€"

----

.. _class_@GDScript_method_convert:

- :ref:`Variant<class_Variant>` **convert** **(** :ref:`Variant<class_Variant>` what, :ref:`int<class_int>` type **)**

Converts from a type to another in the best way possible. The ``type`` parameter uses the :ref:`Variant.Type<enum_@GlobalScope_Variant.Type>` values.

::

    a = Vector2(1, 0)
    # Prints 1
    print(a.length())
    a = convert(a, TYPE_STRING)
    # Prints 6 as "(1, 0)" is 6 characters
    print(a.length())

----

.. _class_@GDScript_method_dict_to_inst:

- :ref:`Object<class_Object>` **dict_to_inst** **(** :ref:`Dictionary<class_Dictionary>` dictionary **)**

Converts a ``dictionary`` (previously created with :ref:`inst_to_dict<class_@GDScript_method_inst_to_dict>`) back to an Object instance. Useful for deserializing.

----

.. _class_@GDScript_method_get_stack:

- :ref:`Array<class_Array>` **get_stack** **(** **)**

Returns an array of dictionaries representing the current call stack. See also :ref:`print_stack<class_@GDScript_method_print_stack>`.

::

    func _ready():
        foo()
    
    func foo():
        bar()
    
    func bar():
        print(get_stack())

would print

::

    [{function:bar, line:12, source:res://script.gd}, {function:foo, line:9, source:res://script.gd}, {function:_ready, line:6, source:res://script.gd}]

\ **Note:** :ref:`get_stack<class_@GDScript_method_get_stack>` only works if the running instance is connected to a debugging server (i.e. an editor instance). :ref:`get_stack<class_@GDScript_method_get_stack>` will not work in projects exported in release mode, or in projects exported in debug mode if not connected to a debugging server.

\ **Note:** Not supported for calling from threads. Instead, this will return an empty array.

----

.. _class_@GDScript_method_inst_to_dict:

- :ref:`Dictionary<class_Dictionary>` **inst_to_dict** **(** :ref:`Object<class_Object>` instance **)**

Returns the passed ``instance`` converted to a Dictionary (useful for serializing).

::

    var foo = "bar"
    func _ready():
        var d = inst_to_dict(self)
        print(d.keys())
        print(d.values())

Prints out:

::

    [@subpath, @path, foo]
    [, res://test.gd, bar]

----

.. _class_@GDScript_method_len:

- :ref:`int<class_int>` **len** **(** :ref:`Variant<class_Variant>` var **)**

Returns length of Variant ``var``. Length is the character count of String, element count of Array, size of Dictionary, etc.

\ **Note:** Generates a fatal error if Variant can not provide a length.

::

    a = [1, 2, 3, 4]
    len(a) # Returns 4

----

.. _class_@GDScript_method_load:

- :ref:`Resource<class_Resource>` **load** **(** :ref:`String<class_String>` path **)**

Loads a resource from the filesystem located at ``path``. The resource is loaded on the method call (unless it's referenced already elsewhere, e.g. in another script or in the scene), which might cause slight delay, especially when loading scenes. To avoid unnecessary delays when loading something multiple times, either store the resource in a variable or use :ref:`preload<class_@GDScript_method_preload>`.

\ **Note:** Resource paths can be obtained by right-clicking on a resource in the FileSystem dock and choosing "Copy Path" or by dragging the file from the FileSystem dock into the script.

::

    # Load a scene called main located in the root of the project directory and cache it in a variable.
    var main = load("res://main.tscn") # main will contain a PackedScene resource.

\ **Important:** The path must be absolute, a local path will just return ``null``.

This method is a simplified version of :ref:`ResourceLoader.load<class_ResourceLoader_method_load>`, which can be used for more advanced scenarios.

\ **Note:** You have to import the files into the engine first to load them using :ref:`load<class_@GDScript_method_load>`. If you want to load :ref:`Image<class_Image>`\ s at run-time, you may use :ref:`Image.load<class_Image_method_load>`. If you want to import audio files, you can use the snippet described in :ref:`AudioStreamMP3.data<class_AudioStreamMP3_property_data>`.

----

.. _class_@GDScript_method_preload:

- :ref:`Resource<class_Resource>` **preload** **(** :ref:`String<class_String>` path **)**

Returns a :ref:`Resource<class_Resource>` from the filesystem located at ``path``. The resource is loaded during script parsing, i.e. is loaded with the script and :ref:`preload<class_@GDScript_method_preload>` effectively acts as a reference to that resource. Note that the method requires a constant path. If you want to load a resource from a dynamic/variable path, use :ref:`load<class_@GDScript_method_load>`.

\ **Note:** Resource paths can be obtained by right clicking on a resource in the Assets Panel and choosing "Copy Path" or by dragging the file from the FileSystem dock into the script.

::

    # Instance a scene.
    var diamond = preload("res://diamond.tscn").instantiate()

----

.. _class_@GDScript_method_print_debug:

- void **print_debug** **(** ... **)** |vararg|

Like :ref:`@GlobalScope.print<class_@GlobalScope_method_print>`, but includes the current stack frame when running with the debugger turned on.

Output in the console would look something like this:

::

    Test print
       At: res://test.gd:15:_process()

\ **Note:** Not supported for calling from threads. Instead of the stack frame, this will print the thread ID.

----

.. _class_@GDScript_method_print_stack:

- void **print_stack** **(** **)**

Prints a stack trace at the current code location. See also :ref:`get_stack<class_@GDScript_method_get_stack>`.

Output in the console would look something like this:

::

    Frame 0 - res://test.gd:16 in function '_process'

\ **Note:** :ref:`print_stack<class_@GDScript_method_print_stack>` only works if the running instance is connected to a debugging server (i.e. an editor instance). :ref:`print_stack<class_@GDScript_method_print_stack>` will not work in projects exported in release mode, or in projects exported in debug mode if not connected to a debugging server.

\ **Note:** Not supported for calling from threads. Instead of the stack trace, this will print the thread ID.

----

.. _class_@GDScript_method_range:

- :ref:`Array<class_Array>` **range** **(** ... **)** |vararg|

Returns an array with the given range. :ref:`range<class_@GDScript_method_range>` can be called in three ways:

\ ``range(n: int)``: Starts from 0, increases by steps of 1, and stops *before* ``n``. The argument ``n`` is **exclusive**.

\ ``range(b: int, n: int)``: Starts from ``b``, increases by steps of 1, and stops *before* ``n``. The arguments ``b`` and ``n`` are **inclusive** and **exclusive**, respectively.

\ ``range(b: int, n: int, s: int)``: Starts from ``b``, increases/decreases by steps of ``s``, and stops *before* ``n``. The arguments ``b`` and ``n`` are **inclusive** and **exclusive**, respectively. The argument ``s`` **can** be negative, but not ``0``. If ``s`` is ``0``, an error message is printed.

\ :ref:`range<class_@GDScript_method_range>` converts all arguments to :ref:`int<class_int>` before processing.

\ **Note:** Returns an empty array if no value meets the value constraint (e.g. ``range(2, 5, -1)`` or ``range(5, 5, 1)``).

Examples:

::

    print(range(4))        # Prints [0, 1, 2, 3]
    print(range(2, 5))     # Prints [2, 3, 4]
    print(range(0, 6, 2))  # Prints [0, 2, 4]
    print(range(4, 1, -1)) # Prints [4, 3, 2]

To iterate over an :ref:`Array<class_Array>` backwards, use:

::

    var array = [3, 6, 9]
    for i in range(array.size(), 0, -1):
        print(array[i - 1])

Output:

::

    9
    6
    3

To iterate over :ref:`float<class_float>`, convert them in the loop.

::

    for i in range (3, 0, -1):
        print(i / 10.0)

Output:

::

    0.3
    0.2
    0.1

----

.. _class_@GDScript_method_str:

- :ref:`String<class_String>` **str** **(** ... **)** |vararg|

Converts one or more arguments to string in the best way possible.

::

    var a = [10, 20, 30]
    var b = str(a);
    len(a) # Returns 3
    len(b) # Returns 12

----

.. _class_@GDScript_method_type_exists:

- :ref:`bool<class_bool>` **type_exists** **(** :ref:`StringName<class_StringName>` type **)**

Returns whether the given :ref:`Object<class_Object>`-derived class exists in :ref:`ClassDB<class_ClassDB>`. Note that :ref:`Variant<class_Variant>` data types are not registered in :ref:`ClassDB<class_ClassDB>`.

::

    type_exists("Sprite2D") # Returns true
    type_exists("NonExistentClass") # Returns false

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
