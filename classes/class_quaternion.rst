:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Quaternion.xml.

.. _class_Quaternion:

Quaternion
==========

Quaternion.

Description
-----------

A unit quaternion used for representing 3D rotations. Quaternions need to be normalized to be used for rotation.

It is similar to Basis, which implements matrix representation of rotations, and can be parametrized using both an axis-angle pair or Euler angles. Basis stores rotation, scale, and shearing, while Quaternion only stores rotation.

Due to its compactness and the way it is stored in memory, certain operations (obtaining axis-angle and performing SLERP, in particular) are more efficient and robust against floating-point errors.

Tutorials
---------

- `Using 3D transforms <../tutorials/3d/using_transforms.html#interpolating-with-quaternions>`__

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

Properties
----------

+---------------------------+---------------------------------------+---------+
| :ref:`float<class_float>` | :ref:`w<class_Quaternion_property_w>` | ``1.0`` |
+---------------------------+---------------------------------------+---------+
| :ref:`float<class_float>` | :ref:`x<class_Quaternion_property_x>` | ``0.0`` |
+---------------------------+---------------------------------------+---------+
| :ref:`float<class_float>` | :ref:`y<class_Quaternion_property_y>` | ``0.0`` |
+---------------------------+---------------------------------------+---------+
| :ref:`float<class_float>` | :ref:`z<class_Quaternion_property_z>` | ``0.0`` |
+---------------------------+---------------------------------------+---------+

Constructors
------------

+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`Quaternion<class_Quaternion_constructor_Quaternion>` **(** **)**                                                                                                                    |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`Quaternion<class_Quaternion_constructor_Quaternion>` **(** :ref:`Quaternion<class_Quaternion>` from **)**                                                                           |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`Quaternion<class_Quaternion_constructor_Quaternion>` **(** :ref:`Vector3<class_Vector3>` arc_from, :ref:`Vector3<class_Vector3>` arc_to **)**                                       |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`Quaternion<class_Quaternion_constructor_Quaternion>` **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**                                                |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`Quaternion<class_Quaternion_constructor_Quaternion>` **(** :ref:`Vector3<class_Vector3>` euler_yxz **)**                                                                            |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`Quaternion<class_Quaternion_constructor_Quaternion>` **(** :ref:`Basis<class_Basis>` from **)**                                                                                     |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`Quaternion<class_Quaternion_constructor_Quaternion>` **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y, :ref:`float<class_float>` z, :ref:`float<class_float>` w **)** |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Methods
-------

+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`           | :ref:`angle_to<class_Quaternion_method_angle_to>` **(** :ref:`Quaternion<class_Quaternion>` to **)** |const|                                                                                                                                                                                                                                                                                     |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`           | :ref:`dot<class_Quaternion_method_dot>` **(** :ref:`Quaternion<class_Quaternion>` with **)** |const|                                                                                                                                                                                                                                                                                             |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`exp<class_Quaternion_method_exp>` **(** **)** |const|                                                                                                                                                                                                                                                                                                                                      |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`           | :ref:`get_angle<class_Quaternion_method_get_angle>` **(** **)** |const|                                                                                                                                                                                                                                                                                                                          |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`       | :ref:`get_axis<class_Quaternion_method_get_axis>` **(** **)** |const|                                                                                                                                                                                                                                                                                                                            |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`       | :ref:`get_euler<class_Quaternion_method_get_euler>` **(** **)** |const|                                                                                                                                                                                                                                                                                                                          |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`inverse<class_Quaternion_method_inverse>` **(** **)** |const|                                                                                                                                                                                                                                                                                                                              |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`is_equal_approx<class_Quaternion_method_is_equal_approx>` **(** :ref:`Quaternion<class_Quaternion>` to **)** |const|                                                                                                                                                                                                                                                                       |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`is_normalized<class_Quaternion_method_is_normalized>` **(** **)** |const|                                                                                                                                                                                                                                                                                                                  |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`           | :ref:`length<class_Quaternion_method_length>` **(** **)** |const|                                                                                                                                                                                                                                                                                                                                |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`           | :ref:`length_squared<class_Quaternion_method_length_squared>` **(** **)** |const|                                                                                                                                                                                                                                                                                                                |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`log<class_Quaternion_method_log>` **(** **)** |const|                                                                                                                                                                                                                                                                                                                                      |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`normalized<class_Quaternion_method_normalized>` **(** **)** |const|                                                                                                                                                                                                                                                                                                                        |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`slerp<class_Quaternion_method_slerp>` **(** :ref:`Quaternion<class_Quaternion>` to, :ref:`float<class_float>` weight **)** |const|                                                                                                                                                                                                                                                         |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`slerpni<class_Quaternion_method_slerpni>` **(** :ref:`Quaternion<class_Quaternion>` to, :ref:`float<class_float>` weight **)** |const|                                                                                                                                                                                                                                                     |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`spherical_cubic_interpolate<class_Quaternion_method_spherical_cubic_interpolate>` **(** :ref:`Quaternion<class_Quaternion>` b, :ref:`Quaternion<class_Quaternion>` pre_a, :ref:`Quaternion<class_Quaternion>` post_b, :ref:`float<class_float>` weight **)** |const|                                                                                                                       |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`spherical_cubic_interpolate_in_time<class_Quaternion_method_spherical_cubic_interpolate_in_time>` **(** :ref:`Quaternion<class_Quaternion>` b, :ref:`Quaternion<class_Quaternion>` pre_a, :ref:`Quaternion<class_Quaternion>` post_b, :ref:`float<class_float>` weight, :ref:`float<class_float>` b_t, :ref:`float<class_float>` pre_a_t, :ref:`float<class_float>` post_b_t **)** |const| |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Operators
---------

+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`operator !=<class_Quaternion_operator_neq_bool>` **(** :ref:`Quaternion<class_Quaternion>` right **)**      |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`operator *<class_Quaternion_operator_mul_Quaternion>` **(** :ref:`Quaternion<class_Quaternion>` right **)** |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`       | :ref:`operator *<class_Quaternion_operator_mul_Vector3>` **(** :ref:`Vector3<class_Vector3>` right **)**          |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`operator *<class_Quaternion_operator_mul_Quaternion>` **(** :ref:`float<class_float>` right **)**           |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`operator *<class_Quaternion_operator_mul_Quaternion>` **(** :ref:`int<class_int>` right **)**               |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`operator +<class_Quaternion_operator_sum_Quaternion>` **(** :ref:`Quaternion<class_Quaternion>` right **)** |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`operator -<class_Quaternion_operator_dif_Quaternion>` **(** :ref:`Quaternion<class_Quaternion>` right **)** |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`operator /<class_Quaternion_operator_div_Quaternion>` **(** :ref:`float<class_float>` right **)**           |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`operator /<class_Quaternion_operator_div_Quaternion>` **(** :ref:`int<class_int>` right **)**               |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`operator ==<class_Quaternion_operator_eq_bool>` **(** :ref:`Quaternion<class_Quaternion>` right **)**       |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`           | :ref:`operator []<class_Quaternion_operator_idx_float>` **(** :ref:`int<class_int>` index **)**                   |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`operator unary+<class_Quaternion_operator_unplus_Quaternion>` **(** **)**                                   |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Quaternion<class_Quaternion>` | :ref:`operator unary-<class_Quaternion_operator_unminus_Quaternion>` **(** **)**                                  |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------+

Constants
---------

.. _class_Quaternion_constant_IDENTITY:

- **IDENTITY** = **Quaternion(0, 0, 0, 1)** --- The identity quaternion, representing no rotation. Equivalent to an identity :ref:`Basis<class_Basis>` matrix. If a vector is transformed by an identity quaternion, it will not change.

Property Descriptions
---------------------

.. _class_Quaternion_property_w:

- :ref:`float<class_float>` **w**

+-----------+---------+
| *Default* | ``1.0`` |
+-----------+---------+

W component of the quaternion (real part).

Quaternion components should usually not be manipulated directly.

----

.. _class_Quaternion_property_x:

- :ref:`float<class_float>` **x**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

X component of the quaternion (imaginary ``i`` axis part).

Quaternion components should usually not be manipulated directly.

----

.. _class_Quaternion_property_y:

- :ref:`float<class_float>` **y**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

Y component of the quaternion (imaginary ``j`` axis part).

Quaternion components should usually not be manipulated directly.

----

.. _class_Quaternion_property_z:

- :ref:`float<class_float>` **z**

+-----------+---------+
| *Default* | ``0.0`` |
+-----------+---------+

Z component of the quaternion (imaginary ``k`` axis part).

Quaternion components should usually not be manipulated directly.

Constructor Descriptions
------------------------

.. _class_Quaternion_constructor_Quaternion:

- :ref:`Quaternion<class_Quaternion>` **Quaternion** **(** **)**

Constructs a default-initialized quaternion with all components set to ``0``.

----

- :ref:`Quaternion<class_Quaternion>` **Quaternion** **(** :ref:`Quaternion<class_Quaternion>` from **)**

Constructs a ``Quaternion`` as a copy of the given ``Quaternion``.

----

- :ref:`Quaternion<class_Quaternion>` **Quaternion** **(** :ref:`Vector3<class_Vector3>` arc_from, :ref:`Vector3<class_Vector3>` arc_to **)**

----

- :ref:`Quaternion<class_Quaternion>` **Quaternion** **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**

Constructs a quaternion that will rotate around the given axis by the specified angle. The axis must be a normalized vector.

----

- :ref:`Quaternion<class_Quaternion>` **Quaternion** **(** :ref:`Vector3<class_Vector3>` euler_yxz **)**

----

- :ref:`Quaternion<class_Quaternion>` **Quaternion** **(** :ref:`Basis<class_Basis>` from **)**

Constructs a quaternion from the given :ref:`Basis<class_Basis>`.

----

- :ref:`Quaternion<class_Quaternion>` **Quaternion** **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y, :ref:`float<class_float>` z, :ref:`float<class_float>` w **)**

Constructs a quaternion defined by the given values.

Method Descriptions
-------------------

.. _class_Quaternion_method_angle_to:

- :ref:`float<class_float>` **angle_to** **(** :ref:`Quaternion<class_Quaternion>` to **)** |const|

Returns the angle between this quaternion and ``to``. This is the magnitude of the angle you would need to rotate by to get from one to the other.

\ **Note:** This method has an abnormally high number of floating-point errors, so methods such as ``is_zero_approx`` will not work reliably.

----

.. _class_Quaternion_method_dot:

- :ref:`float<class_float>` **dot** **(** :ref:`Quaternion<class_Quaternion>` with **)** |const|

Returns the dot product of two quaternions.

----

.. _class_Quaternion_method_exp:

- :ref:`Quaternion<class_Quaternion>` **exp** **(** **)** |const|

----

.. _class_Quaternion_method_get_angle:

- :ref:`float<class_float>` **get_angle** **(** **)** |const|

----

.. _class_Quaternion_method_get_axis:

- :ref:`Vector3<class_Vector3>` **get_axis** **(** **)** |const|

----

.. _class_Quaternion_method_get_euler:

- :ref:`Vector3<class_Vector3>` **get_euler** **(** **)** |const|

Returns Euler angles (in the YXZ convention: when decomposing, first Z, then X, and Y last) corresponding to the rotation represented by the unit quaternion. Returned vector contains the rotation angles in the format (X angle, Y angle, Z angle).

----

.. _class_Quaternion_method_inverse:

- :ref:`Quaternion<class_Quaternion>` **inverse** **(** **)** |const|

Returns the inverse of the quaternion.

----

.. _class_Quaternion_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`Quaternion<class_Quaternion>` to **)** |const|

Returns ``true`` if this quaternion and ``to`` are approximately equal, by running :ref:`@GlobalScope.is_equal_approx<class_@GlobalScope_method_is_equal_approx>` on each component.

----

.. _class_Quaternion_method_is_normalized:

- :ref:`bool<class_bool>` **is_normalized** **(** **)** |const|

Returns whether the quaternion is normalized or not.

----

.. _class_Quaternion_method_length:

- :ref:`float<class_float>` **length** **(** **)** |const|

Returns the length of the quaternion.

----

.. _class_Quaternion_method_length_squared:

- :ref:`float<class_float>` **length_squared** **(** **)** |const|

Returns the length of the quaternion, squared.

----

.. _class_Quaternion_method_log:

- :ref:`Quaternion<class_Quaternion>` **log** **(** **)** |const|

----

.. _class_Quaternion_method_normalized:

- :ref:`Quaternion<class_Quaternion>` **normalized** **(** **)** |const|

Returns a copy of the quaternion, normalized to unit length.

----

.. _class_Quaternion_method_slerp:

- :ref:`Quaternion<class_Quaternion>` **slerp** **(** :ref:`Quaternion<class_Quaternion>` to, :ref:`float<class_float>` weight **)** |const|

Returns the result of the spherical linear interpolation between this quaternion and ``to`` by amount ``weight``.

\ **Note:** Both quaternions must be normalized.

----

.. _class_Quaternion_method_slerpni:

- :ref:`Quaternion<class_Quaternion>` **slerpni** **(** :ref:`Quaternion<class_Quaternion>` to, :ref:`float<class_float>` weight **)** |const|

Returns the result of the spherical linear interpolation between this quaternion and ``to`` by amount ``weight``, but without checking if the rotation path is not bigger than 90 degrees.

----

.. _class_Quaternion_method_spherical_cubic_interpolate:

- :ref:`Quaternion<class_Quaternion>` **spherical_cubic_interpolate** **(** :ref:`Quaternion<class_Quaternion>` b, :ref:`Quaternion<class_Quaternion>` pre_a, :ref:`Quaternion<class_Quaternion>` post_b, :ref:`float<class_float>` weight **)** |const|

Performs a spherical cubic interpolation between quaternions ``pre_a``, this vector, ``b``, and ``post_b``, by the given amount ``weight``.

----

.. _class_Quaternion_method_spherical_cubic_interpolate_in_time:

- :ref:`Quaternion<class_Quaternion>` **spherical_cubic_interpolate_in_time** **(** :ref:`Quaternion<class_Quaternion>` b, :ref:`Quaternion<class_Quaternion>` pre_a, :ref:`Quaternion<class_Quaternion>` post_b, :ref:`float<class_float>` weight, :ref:`float<class_float>` b_t, :ref:`float<class_float>` pre_a_t, :ref:`float<class_float>` post_b_t **)** |const|

Performs a spherical cubic interpolation between quaternions ``pre_a``, this vector, ``b``, and ``post_b``, by the given amount ``weight``.

It can perform smoother interpolation than ``spherical_cubic_interpolate()`` by the time values.

Operator Descriptions
---------------------

.. _class_Quaternion_operator_neq_bool:

- :ref:`bool<class_bool>` **operator !=** **(** :ref:`Quaternion<class_Quaternion>` right **)**

Returns ``true`` if the quaternions are not equal.

\ **Note:** Due to floating-point precision errors, consider using :ref:`is_equal_approx<class_Quaternion_method_is_equal_approx>` instead, which is more reliable.

----

.. _class_Quaternion_operator_mul_Quaternion:

- :ref:`Quaternion<class_Quaternion>` **operator *** **(** :ref:`Quaternion<class_Quaternion>` right **)**

Composes these two quaternions by multiplying them together. This has the effect of rotating the second quaternion (the child) by the first quaternion (the parent).

----

- :ref:`Vector3<class_Vector3>` **operator *** **(** :ref:`Vector3<class_Vector3>` right **)**

Rotates (multiplies) the :ref:`Vector3<class_Vector3>` by the given ``Quaternion``.

----

- :ref:`Quaternion<class_Quaternion>` **operator *** **(** :ref:`float<class_float>` right **)**

Multiplies each component of the ``Quaternion`` by the given value. This operation is not meaningful on its own, but it can be used as a part of a larger expression.

----

- :ref:`Quaternion<class_Quaternion>` **operator *** **(** :ref:`int<class_int>` right **)**

Multiplies each component of the ``Quaternion`` by the given value. This operation is not meaningful on its own, but it can be used as a part of a larger expression.

----

.. _class_Quaternion_operator_sum_Quaternion:

- :ref:`Quaternion<class_Quaternion>` **operator +** **(** :ref:`Quaternion<class_Quaternion>` right **)**

Adds each component of the left ``Quaternion`` to the right ``Quaternion``. This operation is not meaningful on its own, but it can be used as a part of a larger expression, such as approximating an intermediate rotation between two nearby rotations.

----

.. _class_Quaternion_operator_dif_Quaternion:

- :ref:`Quaternion<class_Quaternion>` **operator -** **(** :ref:`Quaternion<class_Quaternion>` right **)**

Subtracts each component of the left ``Quaternion`` by the right ``Quaternion``. This operation is not meaningful on its own, but it can be used as a part of a larger expression.

----

.. _class_Quaternion_operator_div_Quaternion:

- :ref:`Quaternion<class_Quaternion>` **operator /** **(** :ref:`float<class_float>` right **)**

Divides each component of the ``Quaternion`` by the given value. This operation is not meaningful on its own, but it can be used as a part of a larger expression.

----

- :ref:`Quaternion<class_Quaternion>` **operator /** **(** :ref:`int<class_int>` right **)**

Divides each component of the ``Quaternion`` by the given value. This operation is not meaningful on its own, but it can be used as a part of a larger expression.

----

.. _class_Quaternion_operator_eq_bool:

- :ref:`bool<class_bool>` **operator ==** **(** :ref:`Quaternion<class_Quaternion>` right **)**

Returns ``true`` if the quaternions are exactly equal.

\ **Note:** Due to floating-point precision errors, consider using :ref:`is_equal_approx<class_Quaternion_method_is_equal_approx>` instead, which is more reliable.

----

.. _class_Quaternion_operator_idx_float:

- :ref:`float<class_float>` **operator []** **(** :ref:`int<class_int>` index **)**

Access quaternion components using their index. ``q[0]`` is equivalent to ``q.x``, ``q[1]`` is equivalent to ``q.y``, ``q[2]`` is equivalent to ``q.z``, and ``q[3]`` is equivalent to ``q.w``.

----

.. _class_Quaternion_operator_unplus_Quaternion:

- :ref:`Quaternion<class_Quaternion>` **operator unary+** **(** **)**

Returns the same value as if the ``+`` was not there. Unary ``+`` does nothing, but sometimes it can make your code more readable.

----

.. _class_Quaternion_operator_unminus_Quaternion:

- :ref:`Quaternion<class_Quaternion>` **operator unary-** **(** **)**

Returns the negative value of the ``Quaternion``. This is the same as writing ``Quaternion(-q.x, -q.y, -q.z, -q.w)``. This operation results in a quaternion that represents the same rotation.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
