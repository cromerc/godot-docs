:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/Vector2i.xml.

.. _class_Vector2i:

Vector2i
========

Vector used for 2D math using integer coordinates.

Description
-----------

2-element structure that can be used to represent positions in 2D space or any other pair of numeric values.

It uses integer coordinates and is therefore preferable to :ref:`Vector2<class_Vector2>` when exact precision is required.

\ **Note:** In a boolean context, a Vector2i will evaluate to ``false`` if it's equal to ``Vector2i(0, 0)``. Otherwise, a Vector2i will always evaluate to ``true``.

Tutorials
---------

- :doc:`Math documentation index <../tutorials/math/index>`

- :doc:`Vector math <../tutorials/math/vector_math>`

- `3Blue1Brown Essence of Linear Algebra <https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab>`__

Properties
----------

+-----------------------+-------------------------------------+-------+
| :ref:`int<class_int>` | :ref:`x<class_Vector2i_property_x>` | ``0`` |
+-----------------------+-------------------------------------+-------+
| :ref:`int<class_int>` | :ref:`y<class_Vector2i_property_y>` | ``0`` |
+-----------------------+-------------------------------------+-------+

Constructors
------------

+---------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`Vector2i<class_Vector2i_constructor_Vector2i>` **(** **)**                                                  |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`Vector2i<class_Vector2i_constructor_Vector2i>` **(** :ref:`Vector2i<class_Vector2i>` from **)**             |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`Vector2i<class_Vector2i_constructor_Vector2i>` **(** :ref:`Vector2<class_Vector2>` from **)**               |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`Vector2i<class_Vector2i_constructor_Vector2i>` **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y **)** |
+---------------------------------+-------------------------------------------------------------------------------------------------------------------+

Methods
-------

+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`abs<class_Vector2i_method_abs>` **(** **)** |const|                                                                              |
+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`       | :ref:`aspect<class_Vector2i_method_aspect>` **(** **)** |const|                                                                        |
+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`clamp<class_Vector2i_method_clamp>` **(** :ref:`Vector2i<class_Vector2i>` min, :ref:`Vector2i<class_Vector2i>` max **)** |const| |
+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`       | :ref:`length<class_Vector2i_method_length>` **(** **)** |const|                                                                        |
+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`           | :ref:`length_squared<class_Vector2i_method_length_squared>` **(** **)** |const|                                                        |
+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`           | :ref:`max_axis_index<class_Vector2i_method_max_axis_index>` **(** **)** |const|                                                        |
+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`           | :ref:`min_axis_index<class_Vector2i_method_min_axis_index>` **(** **)** |const|                                                        |
+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`sign<class_Vector2i_method_sign>` **(** **)** |const|                                                                            |
+---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+

Operators
---------

+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`         | :ref:`operator !=<class_Vector2i_operator_neq_bool>` **(** :ref:`Vector2i<class_Vector2i>` right **)**    |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`operator %<class_Vector2i_operator_mod_Vector2i>` **(** :ref:`Vector2i<class_Vector2i>` right **)** |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`operator %<class_Vector2i_operator_mod_Vector2i>` **(** :ref:`int<class_int>` right **)**           |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`operator *<class_Vector2i_operator_mul_Vector2i>` **(** :ref:`Vector2i<class_Vector2i>` right **)** |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`   | :ref:`operator *<class_Vector2i_operator_mul_Vector2>` **(** :ref:`float<class_float>` right **)**        |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`operator *<class_Vector2i_operator_mul_Vector2i>` **(** :ref:`int<class_int>` right **)**           |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`operator +<class_Vector2i_operator_sum_Vector2i>` **(** :ref:`Vector2i<class_Vector2i>` right **)** |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`operator -<class_Vector2i_operator_dif_Vector2i>` **(** :ref:`Vector2i<class_Vector2i>` right **)** |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`operator /<class_Vector2i_operator_div_Vector2i>` **(** :ref:`Vector2i<class_Vector2i>` right **)** |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`   | :ref:`operator /<class_Vector2i_operator_div_Vector2>` **(** :ref:`float<class_float>` right **)**        |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`operator /<class_Vector2i_operator_div_Vector2i>` **(** :ref:`int<class_int>` right **)**           |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`         | :ref:`operator \<<class_Vector2i_operator_lt_bool>` **(** :ref:`Vector2i<class_Vector2i>` right **)**     |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`         | :ref:`operator \<=<class_Vector2i_operator_lte_bool>` **(** :ref:`Vector2i<class_Vector2i>` right **)**   |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`         | :ref:`operator ==<class_Vector2i_operator_eq_bool>` **(** :ref:`Vector2i<class_Vector2i>` right **)**     |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`         | :ref:`operator ><class_Vector2i_operator_gt_bool>` **(** :ref:`Vector2i<class_Vector2i>` right **)**      |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`         | :ref:`operator >=<class_Vector2i_operator_gte_bool>` **(** :ref:`Vector2i<class_Vector2i>` right **)**    |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`           | :ref:`operator []<class_Vector2i_operator_idx_int>` **(** :ref:`int<class_int>` index **)**               |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`operator unary+<class_Vector2i_operator_unplus_Vector2i>` **(** **)**                               |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+
| :ref:`Vector2i<class_Vector2i>` | :ref:`operator unary-<class_Vector2i_operator_unminus_Vector2i>` **(** **)**                              |
+---------------------------------+-----------------------------------------------------------------------------------------------------------+

Constants
---------

.. _class_Vector2i_constant_AXIS_X:

.. _class_Vector2i_constant_AXIS_Y:

.. _class_Vector2i_constant_ZERO:

.. _class_Vector2i_constant_ONE:

.. _class_Vector2i_constant_LEFT:

.. _class_Vector2i_constant_RIGHT:

.. _class_Vector2i_constant_UP:

.. _class_Vector2i_constant_DOWN:

- **AXIS_X** = **0** --- Enumerated value for the X axis. Returned by :ref:`max_axis_index<class_Vector2i_method_max_axis_index>` and :ref:`min_axis_index<class_Vector2i_method_min_axis_index>`.

- **AXIS_Y** = **1** --- Enumerated value for the Y axis. Returned by :ref:`max_axis_index<class_Vector2i_method_max_axis_index>` and :ref:`min_axis_index<class_Vector2i_method_min_axis_index>`.

- **ZERO** = **Vector2i(0, 0)** --- Zero vector, a vector with all components set to ``0``.

- **ONE** = **Vector2i(1, 1)** --- One vector, a vector with all components set to ``1``.

- **LEFT** = **Vector2i(-1, 0)** --- Left unit vector. Represents the direction of left.

- **RIGHT** = **Vector2i(1, 0)** --- Right unit vector. Represents the direction of right.

- **UP** = **Vector2i(0, -1)** --- Up unit vector. Y is down in 2D, so this vector points -Y.

- **DOWN** = **Vector2i(0, 1)** --- Down unit vector. Y is down in 2D, so this vector points +Y.

Property Descriptions
---------------------

.. _class_Vector2i_property_x:

- :ref:`int<class_int>` **x**

+-----------+-------+
| *Default* | ``0`` |
+-----------+-------+

The vector's X component. Also accessible by using the index position ``[0]``.

----

.. _class_Vector2i_property_y:

- :ref:`int<class_int>` **y**

+-----------+-------+
| *Default* | ``0`` |
+-----------+-------+

The vector's Y component. Also accessible by using the index position ``[1]``.

Constructor Descriptions
------------------------

.. _class_Vector2i_constructor_Vector2i:

- :ref:`Vector2i<class_Vector2i>` **Vector2i** **(** **)**

Constructs a default-initialized ``Vector2i`` with all components set to ``0``.

----

- :ref:`Vector2i<class_Vector2i>` **Vector2i** **(** :ref:`Vector2i<class_Vector2i>` from **)**

Constructs a ``Vector2i`` as a copy of the given ``Vector2i``.

----

- :ref:`Vector2i<class_Vector2i>` **Vector2i** **(** :ref:`Vector2<class_Vector2>` from **)**

Constructs a new ``Vector2i`` from :ref:`Vector2<class_Vector2>`. The floating point coordinates will be truncated.

----

- :ref:`Vector2i<class_Vector2i>` **Vector2i** **(** :ref:`int<class_int>` x, :ref:`int<class_int>` y **)**

Constructs a new ``Vector2i`` from the given ``x`` and ``y``.

Method Descriptions
-------------------

.. _class_Vector2i_method_abs:

- :ref:`Vector2i<class_Vector2i>` **abs** **(** **)** |const|

Returns a new vector with all components in absolute values (i.e. positive).

----

.. _class_Vector2i_method_aspect:

- :ref:`float<class_float>` **aspect** **(** **)** |const|

Returns the aspect ratio of this vector, the ratio of :ref:`x<class_Vector2i_property_x>` to :ref:`y<class_Vector2i_property_y>`.

----

.. _class_Vector2i_method_clamp:

- :ref:`Vector2i<class_Vector2i>` **clamp** **(** :ref:`Vector2i<class_Vector2i>` min, :ref:`Vector2i<class_Vector2i>` max **)** |const|

Returns a new vector with all components clamped between the components of ``min`` and ``max``, by running :ref:`@GlobalScope.clamp<class_@GlobalScope_method_clamp>` on each component.

----

.. _class_Vector2i_method_length:

- :ref:`float<class_float>` **length** **(** **)** |const|

Returns the length (magnitude) of this vector.

----

.. _class_Vector2i_method_length_squared:

- :ref:`int<class_int>` **length_squared** **(** **)** |const|

Returns the squared length (squared magnitude) of this vector.

This method runs faster than :ref:`length<class_Vector2i_method_length>`, so prefer it if you need to compare vectors or need the squared distance for some formula.

----

.. _class_Vector2i_method_max_axis_index:

- :ref:`int<class_int>` **max_axis_index** **(** **)** |const|

Returns the axis of the vector's highest value. See ``AXIS_*`` constants. If all components are equal, this method returns :ref:`AXIS_X<class_Vector2i_constant_AXIS_X>`.

----

.. _class_Vector2i_method_min_axis_index:

- :ref:`int<class_int>` **min_axis_index** **(** **)** |const|

Returns the axis of the vector's lowest value. See ``AXIS_*`` constants. If all components are equal, this method returns :ref:`AXIS_Y<class_Vector2i_constant_AXIS_Y>`.

----

.. _class_Vector2i_method_sign:

- :ref:`Vector2i<class_Vector2i>` **sign** **(** **)** |const|

Returns a new vector with each component set to one or negative one, depending on the signs of the components, or zero if the component is zero, by calling :ref:`@GlobalScope.sign<class_@GlobalScope_method_sign>` on each component.

Operator Descriptions
---------------------

.. _class_Vector2i_operator_neq_bool:

- :ref:`bool<class_bool>` **operator !=** **(** :ref:`Vector2i<class_Vector2i>` right **)**

Returns ``true`` if the vectors are not equal.

----

.. _class_Vector2i_operator_mod_Vector2i:

- :ref:`Vector2i<class_Vector2i>` **operator %** **(** :ref:`Vector2i<class_Vector2i>` right **)**

Gets the remainder of each component of the ``Vector2i`` with the components of the given ``Vector2i``. This operation uses truncated division, which is often not desired as it does not work well with negative numbers. Consider using :ref:`@GlobalScope.posmod<class_@GlobalScope_method_posmod>` instead if you want to handle negative numbers.

::

    print(Vector2i(10, -20) % Vector2i(7, 8)) # Prints "(3, -4)"

----

- :ref:`Vector2i<class_Vector2i>` **operator %** **(** :ref:`int<class_int>` right **)**

Gets the remainder of each component of the ``Vector2i`` with the the given :ref:`int<class_int>`. This operation uses truncated division, which is often not desired as it does not work well with negative numbers. Consider using :ref:`@GlobalScope.posmod<class_@GlobalScope_method_posmod>` instead if you want to handle negative numbers.

::

    print(Vector2i(10, -20) % 7) # Prints "(3, -6)"

----

.. _class_Vector2i_operator_mul_Vector2i:

- :ref:`Vector2i<class_Vector2i>` **operator *** **(** :ref:`Vector2i<class_Vector2i>` right **)**

Multiplies each component of the ``Vector2i`` by the components of the given ``Vector2i``.

::

    print(Vector2i(10, 20) * Vector2i(3, 4)) # Prints "(30, 80)"

----

- :ref:`Vector2<class_Vector2>` **operator *** **(** :ref:`float<class_float>` right **)**

Multiplies each component of the ``Vector2i`` by the given :ref:`float<class_float>`. Returns a :ref:`Vector2<class_Vector2>`.

::

    print(Vector2i(10, 15) * 0.9) # Prints "(9, 13.5)"

----

- :ref:`Vector2i<class_Vector2i>` **operator *** **(** :ref:`int<class_int>` right **)**

Multiplies each component of the ``Vector2i`` by the given :ref:`int<class_int>`.

----

.. _class_Vector2i_operator_sum_Vector2i:

- :ref:`Vector2i<class_Vector2i>` **operator +** **(** :ref:`Vector2i<class_Vector2i>` right **)**

Adds each component of the ``Vector2i`` by the components of the given ``Vector2i``.

::

    print(Vector2i(10, 20) + Vector2i(3, 4)) # Prints "(13, 24)"

----

.. _class_Vector2i_operator_dif_Vector2i:

- :ref:`Vector2i<class_Vector2i>` **operator -** **(** :ref:`Vector2i<class_Vector2i>` right **)**

Subtracts each component of the ``Vector2i`` by the components of the given ``Vector2i``.

::

    print(Vector2i(10, 20) - Vector2i(3, 4)) # Prints "(7, 16)"

----

.. _class_Vector2i_operator_div_Vector2i:

- :ref:`Vector2i<class_Vector2i>` **operator /** **(** :ref:`Vector2i<class_Vector2i>` right **)**

Divides each component of the ``Vector2i`` by the components of the given ``Vector2i``.

::

    print(Vector2i(10, 20) / Vector2i(2, 5)) # Prints "(5, 4)"

----

- :ref:`Vector2<class_Vector2>` **operator /** **(** :ref:`float<class_float>` right **)**

Divides each component of the ``Vector2i`` by the given :ref:`float<class_float>`. Returns a :ref:`Vector2<class_Vector2>`.

::

    print(Vector2i(10, 20) / 2.9) # Prints "(5, 10)"

----

- :ref:`Vector2i<class_Vector2i>` **operator /** **(** :ref:`int<class_int>` right **)**

Divides each component of the ``Vector2i`` by the given :ref:`int<class_int>`.

----

.. _class_Vector2i_operator_lt_bool:

- :ref:`bool<class_bool>` **operator <** **(** :ref:`Vector2i<class_Vector2i>` right **)**

Compares two ``Vector2i`` vectors by first checking if the X value of the left vector is less than the X value of the ``right`` vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors. This operator is useful for sorting vectors.

----

.. _class_Vector2i_operator_lte_bool:

- :ref:`bool<class_bool>` **operator <=** **(** :ref:`Vector2i<class_Vector2i>` right **)**

Compares two ``Vector2i`` vectors by first checking if the X value of the left vector is less than or equal to the X value of the ``right`` vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors. This operator is useful for sorting vectors.

----

.. _class_Vector2i_operator_eq_bool:

- :ref:`bool<class_bool>` **operator ==** **(** :ref:`Vector2i<class_Vector2i>` right **)**

Returns ``true`` if the vectors are equal.

----

.. _class_Vector2i_operator_gt_bool:

- :ref:`bool<class_bool>` **operator >** **(** :ref:`Vector2i<class_Vector2i>` right **)**

Compares two ``Vector2i`` vectors by first checking if the X value of the left vector is greater than the X value of the ``right`` vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors. This operator is useful for sorting vectors.

----

.. _class_Vector2i_operator_gte_bool:

- :ref:`bool<class_bool>` **operator >=** **(** :ref:`Vector2i<class_Vector2i>` right **)**

Compares two ``Vector2i`` vectors by first checking if the X value of the left vector is greater than or equal to the X value of the ``right`` vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors. This operator is useful for sorting vectors.

----

.. _class_Vector2i_operator_idx_int:

- :ref:`int<class_int>` **operator []** **(** :ref:`int<class_int>` index **)**

Access vector components using their ``index``. ``v[0]`` is equivalent to ``v.x``, and ``v[1]`` is equivalent to ``v.y``.

----

.. _class_Vector2i_operator_unplus_Vector2i:

- :ref:`Vector2i<class_Vector2i>` **operator unary+** **(** **)**

Returns the same value as if the ``+`` was not there. Unary ``+`` does nothing, but sometimes it can make your code more readable.

----

.. _class_Vector2i_operator_unminus_Vector2i:

- :ref:`Vector2i<class_Vector2i>` **operator unary-** **(** **)**

Returns the negative value of the ``Vector2i``. This is the same as writing ``Vector2i(-v.x, -v.y)``. This operation flips the direction of the vector while keeping the same magnitude.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
