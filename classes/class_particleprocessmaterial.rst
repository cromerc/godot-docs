:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ParticleProcessMaterial.xml.

.. _class_ParticleProcessMaterial:

ParticleProcessMaterial
=======================

**Inherits:** :ref:`Material<class_Material>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

Particle properties for :ref:`GPUParticles3D<class_GPUParticles3D>` and :ref:`GPUParticles2D<class_GPUParticles2D>` nodes.

Description
-----------

ParticleProcessMaterial defines particle properties and behavior. It is used in the ``process_material`` of :ref:`GPUParticles3D<class_GPUParticles3D>` and :ref:`GPUParticles2D<class_GPUParticles2D>` emitter nodes.

Some of this material's properties are applied to each particle when emitted, while others can have a :ref:`CurveTexture<class_CurveTexture>` applied to vary values over the lifetime of the particle.

Particle animation is available only in :ref:`GPUParticles2D<class_GPUParticles2D>`. To use it, attach a :ref:`CanvasItemMaterial<class_CanvasItemMaterial>`, with :ref:`CanvasItemMaterial.particles_animation<class_CanvasItemMaterial_property_particles_animation>` enabled, to the particles node.

Properties
----------

+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`angle_curve<class_ParticleProcessMaterial_property_angle_curve>`                                                 |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`angle_max<class_ParticleProcessMaterial_property_angle_max>`                                                     | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`angle_min<class_ParticleProcessMaterial_property_angle_min>`                                                     | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`angular_velocity_curve<class_ParticleProcessMaterial_property_angular_velocity_curve>`                           |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`angular_velocity_max<class_ParticleProcessMaterial_property_angular_velocity_max>`                               | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`angular_velocity_min<class_ParticleProcessMaterial_property_angular_velocity_min>`                               | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`anim_offset_curve<class_ParticleProcessMaterial_property_anim_offset_curve>`                                     |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`anim_offset_max<class_ParticleProcessMaterial_property_anim_offset_max>`                                         | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`anim_offset_min<class_ParticleProcessMaterial_property_anim_offset_min>`                                         | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`anim_speed_curve<class_ParticleProcessMaterial_property_anim_speed_curve>`                                       |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`anim_speed_max<class_ParticleProcessMaterial_property_anim_speed_max>`                                           | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`anim_speed_min<class_ParticleProcessMaterial_property_anim_speed_min>`                                           | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`bool<class_bool>`                                            | :ref:`attractor_interaction_enabled<class_ParticleProcessMaterial_property_attractor_interaction_enabled>`             | ``true``                   |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`collision_bounce<class_ParticleProcessMaterial_property_collision_bounce>`                                       |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`collision_friction<class_ParticleProcessMaterial_property_collision_friction>`                                   |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>`   | :ref:`collision_mode<class_ParticleProcessMaterial_property_collision_mode>`                                           | ``0``                      |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`bool<class_bool>`                                            | :ref:`collision_use_scale<class_ParticleProcessMaterial_property_collision_use_scale>`                                 | ``false``                  |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Color<class_Color>`                                          | :ref:`color<class_ParticleProcessMaterial_property_color>`                                                             | ``Color(1, 1, 1, 1)``      |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`color_initial_ramp<class_ParticleProcessMaterial_property_color_initial_ramp>`                                   |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`color_ramp<class_ParticleProcessMaterial_property_color_ramp>`                                                   |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`damping_curve<class_ParticleProcessMaterial_property_damping_curve>`                                             |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`damping_max<class_ParticleProcessMaterial_property_damping_max>`                                                 | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`damping_min<class_ParticleProcessMaterial_property_damping_min>`                                                 | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Vector3<class_Vector3>`                                      | :ref:`direction<class_ParticleProcessMaterial_property_direction>`                                                     | ``Vector3(1, 0, 0)``       |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Vector3<class_Vector3>`                                      | :ref:`emission_box_extents<class_ParticleProcessMaterial_property_emission_box_extents>`                               |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>`                           |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`emission_normal_texture<class_ParticleProcessMaterial_property_emission_normal_texture>`                         |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`int<class_int>`                                              | :ref:`emission_point_count<class_ParticleProcessMaterial_property_emission_point_count>`                               |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`                           |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Vector3<class_Vector3>`                                      | :ref:`emission_ring_axis<class_ParticleProcessMaterial_property_emission_ring_axis>`                                   |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`emission_ring_height<class_ParticleProcessMaterial_property_emission_ring_height>`                               |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`emission_ring_inner_radius<class_ParticleProcessMaterial_property_emission_ring_inner_radius>`                   |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`emission_ring_radius<class_ParticleProcessMaterial_property_emission_ring_radius>`                               |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>`   | :ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>`                                           | ``0``                      |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`emission_sphere_radius<class_ParticleProcessMaterial_property_emission_sphere_radius>`                           |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`flatness<class_ParticleProcessMaterial_property_flatness>`                                                       | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Vector3<class_Vector3>`                                      | :ref:`gravity<class_ParticleProcessMaterial_property_gravity>`                                                         | ``Vector3(0, -9.8, 0)``    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`hue_variation_curve<class_ParticleProcessMaterial_property_hue_variation_curve>`                                 |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`hue_variation_max<class_ParticleProcessMaterial_property_hue_variation_max>`                                     | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`hue_variation_min<class_ParticleProcessMaterial_property_hue_variation_min>`                                     | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`initial_velocity_max<class_ParticleProcessMaterial_property_initial_velocity_max>`                               | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`initial_velocity_min<class_ParticleProcessMaterial_property_initial_velocity_min>`                               | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`lifetime_randomness<class_ParticleProcessMaterial_property_lifetime_randomness>`                                 | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`linear_accel_curve<class_ParticleProcessMaterial_property_linear_accel_curve>`                                   |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`linear_accel_max<class_ParticleProcessMaterial_property_linear_accel_max>`                                       | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`linear_accel_min<class_ParticleProcessMaterial_property_linear_accel_min>`                                       | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`orbit_velocity_curve<class_ParticleProcessMaterial_property_orbit_velocity_curve>`                               |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`orbit_velocity_max<class_ParticleProcessMaterial_property_orbit_velocity_max>`                                   |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`orbit_velocity_min<class_ParticleProcessMaterial_property_orbit_velocity_min>`                                   |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`bool<class_bool>`                                            | :ref:`particle_flag_align_y<class_ParticleProcessMaterial_property_particle_flag_align_y>`                             | ``false``                  |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`bool<class_bool>`                                            | :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>`                         | ``false``                  |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`bool<class_bool>`                                            | :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>`                           | ``false``                  |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`radial_accel_curve<class_ParticleProcessMaterial_property_radial_accel_curve>`                                   |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`radial_accel_max<class_ParticleProcessMaterial_property_radial_accel_max>`                                       | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`radial_accel_min<class_ParticleProcessMaterial_property_radial_accel_min>`                                       | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`scale_curve<class_ParticleProcessMaterial_property_scale_curve>`                                                 |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`scale_max<class_ParticleProcessMaterial_property_scale_max>`                                                     | ``1.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`scale_min<class_ParticleProcessMaterial_property_scale_min>`                                                     | ``1.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`spread<class_ParticleProcessMaterial_property_spread>`                                                           | ``45.0``                   |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`int<class_int>`                                              | :ref:`sub_emitter_amount_at_end<class_ParticleProcessMaterial_property_sub_emitter_amount_at_end>`                     |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`sub_emitter_frequency<class_ParticleProcessMaterial_property_sub_emitter_frequency>`                             |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`bool<class_bool>`                                            | :ref:`sub_emitter_keep_velocity<class_ParticleProcessMaterial_property_sub_emitter_keep_velocity>`                     | ``false``                  |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` | :ref:`sub_emitter_mode<class_ParticleProcessMaterial_property_sub_emitter_mode>`                                       | ``0``                      |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`tangential_accel_curve<class_ParticleProcessMaterial_property_tangential_accel_curve>`                           |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`tangential_accel_max<class_ParticleProcessMaterial_property_tangential_accel_max>`                               | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`tangential_accel_min<class_ParticleProcessMaterial_property_tangential_accel_min>`                               | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`bool<class_bool>`                                            | :ref:`turbulence_enabled<class_ParticleProcessMaterial_property_turbulence_enabled>`                                   | ``false``                  |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`turbulence_influence_max<class_ParticleProcessMaterial_property_turbulence_influence_max>`                       | ``0.1``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`turbulence_influence_min<class_ParticleProcessMaterial_property_turbulence_influence_min>`                       | ``0.1``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture2D<class_Texture2D>`                                  | :ref:`turbulence_influence_over_life<class_ParticleProcessMaterial_property_turbulence_influence_over_life>`           |                            |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`turbulence_initial_displacement_max<class_ParticleProcessMaterial_property_turbulence_initial_displacement_max>` | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`turbulence_initial_displacement_min<class_ParticleProcessMaterial_property_turbulence_initial_displacement_min>` | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`turbulence_noise_scale<class_ParticleProcessMaterial_property_turbulence_noise_scale>`                           | ``9.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Vector3<class_Vector3>`                                      | :ref:`turbulence_noise_speed<class_ParticleProcessMaterial_property_turbulence_noise_speed>`                           | ``Vector3(0.5, 0.5, 0.5)`` |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`turbulence_noise_speed_random<class_ParticleProcessMaterial_property_turbulence_noise_speed_random>`             | ``0.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`float<class_float>`                                          | :ref:`turbulence_noise_strength<class_ParticleProcessMaterial_property_turbulence_noise_strength>`                     | ``1.0``                    |
+--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+----------------------------+

Methods
-------

+-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`         | :ref:`get_param_max<class_ParticleProcessMaterial_method_get_param_max>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|                                                 |
+-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`         | :ref:`get_param_min<class_ParticleProcessMaterial_method_get_param_min>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|                                                 |
+-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Texture2D<class_Texture2D>` | :ref:`get_param_texture<class_ParticleProcessMaterial_method_get_param_texture>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|                                         |
+-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`           | :ref:`get_particle_flag<class_ParticleProcessMaterial_method_get_particle_flag>` **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag **)** |const|                         |
+-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**                        |
+-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**                        |
+-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**      |
+-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>` **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag, :ref:`bool<class_bool>` enable **)** |
+-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_ParticleProcessMaterial_Parameter:

.. _class_ParticleProcessMaterial_constant_PARAM_INITIAL_LINEAR_VELOCITY:

.. _class_ParticleProcessMaterial_constant_PARAM_ANGULAR_VELOCITY:

.. _class_ParticleProcessMaterial_constant_PARAM_ORBIT_VELOCITY:

.. _class_ParticleProcessMaterial_constant_PARAM_LINEAR_ACCEL:

.. _class_ParticleProcessMaterial_constant_PARAM_RADIAL_ACCEL:

.. _class_ParticleProcessMaterial_constant_PARAM_TANGENTIAL_ACCEL:

.. _class_ParticleProcessMaterial_constant_PARAM_DAMPING:

.. _class_ParticleProcessMaterial_constant_PARAM_ANGLE:

.. _class_ParticleProcessMaterial_constant_PARAM_SCALE:

.. _class_ParticleProcessMaterial_constant_PARAM_HUE_VARIATION:

.. _class_ParticleProcessMaterial_constant_PARAM_ANIM_SPEED:

.. _class_ParticleProcessMaterial_constant_PARAM_ANIM_OFFSET:

.. _class_ParticleProcessMaterial_constant_PARAM_MAX:

.. _class_ParticleProcessMaterial_constant_PARAM_TURB_VEL_INFLUENCE:

.. _class_ParticleProcessMaterial_constant_PARAM_TURB_INIT_DISPLACEMENT:

.. _class_ParticleProcessMaterial_constant_PARAM_TURB_INFLUENCE_OVER_LIFE:

enum **Parameter**:

- **PARAM_INITIAL_LINEAR_VELOCITY** = **0** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set initial velocity properties.

- **PARAM_ANGULAR_VELOCITY** = **1** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set angular velocity properties.

- **PARAM_ORBIT_VELOCITY** = **2** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set orbital velocity properties.

- **PARAM_LINEAR_ACCEL** = **3** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set linear acceleration properties.

- **PARAM_RADIAL_ACCEL** = **4** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set radial acceleration properties.

- **PARAM_TANGENTIAL_ACCEL** = **5** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set tangential acceleration properties.

- **PARAM_DAMPING** = **6** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set damping properties.

- **PARAM_ANGLE** = **7** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set angle properties.

- **PARAM_SCALE** = **8** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set scale properties.

- **PARAM_HUE_VARIATION** = **9** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set hue variation properties.

- **PARAM_ANIM_SPEED** = **10** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set animation speed properties.

- **PARAM_ANIM_OFFSET** = **11** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`, :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>`, and :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set animation offset properties.

- **PARAM_MAX** = **15** --- Represents the size of the :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` enum.

- **PARAM_TURB_VEL_INFLUENCE** = **13** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>` and :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` to set the turbulence minimum und maximum influence on each particles velocity.

- **PARAM_TURB_INIT_DISPLACEMENT** = **14** --- Use with :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>` and :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` to set the turbulence minimum and maximum displacement of the particles spawn position.

- **PARAM_TURB_INFLUENCE_OVER_LIFE** = **12** --- Use with :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` to set the turbulence influence over the particles life time.

----

.. _enum_ParticleProcessMaterial_ParticleFlags:

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY:

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_ROTATE_Y:

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_DISABLE_Z:

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_MAX:

enum **ParticleFlags**:

- **PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY** = **0** --- Use with :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>` to set :ref:`particle_flag_align_y<class_ParticleProcessMaterial_property_particle_flag_align_y>`.

- **PARTICLE_FLAG_ROTATE_Y** = **1** --- Use with :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>` to set :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>`.

- **PARTICLE_FLAG_DISABLE_Z** = **2** --- Use with :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>` to set :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>`.

- **PARTICLE_FLAG_MAX** = **3** --- Represents the size of the :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` enum.

----

.. _enum_ParticleProcessMaterial_EmissionShape:

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINT:

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_SPHERE:

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_SPHERE_SURFACE:

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_BOX:

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINTS:

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS:

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING:

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_MAX:

enum **EmissionShape**:

- **EMISSION_SHAPE_POINT** = **0** --- All particles will be emitted from a single point.

- **EMISSION_SHAPE_SPHERE** = **1** --- Particles will be emitted in the volume of a sphere.

- **EMISSION_SHAPE_SPHERE_SURFACE** = **2** --- Particles will be emitted on the surface of a sphere.

- **EMISSION_SHAPE_BOX** = **3** --- Particles will be emitted in the volume of a box.

- **EMISSION_SHAPE_POINTS** = **4** --- Particles will be emitted at a position determined by sampling a random point on the :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`. Particle color will be modulated by :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>`.

- **EMISSION_SHAPE_DIRECTED_POINTS** = **5** --- Particles will be emitted at a position determined by sampling a random point on the :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`. Particle velocity and rotation will be set based on :ref:`emission_normal_texture<class_ParticleProcessMaterial_property_emission_normal_texture>`. Particle color will be modulated by :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>`.

- **EMISSION_SHAPE_RING** = **6** --- Particles will be emitted in a ring or cylinder.

- **EMISSION_SHAPE_MAX** = **7** --- Represents the size of the :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` enum.

----

.. _enum_ParticleProcessMaterial_SubEmitterMode:

.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_DISABLED:

.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_CONSTANT:

.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_AT_END:

.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_AT_COLLISION:

.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_MAX:

enum **SubEmitterMode**:

- **SUB_EMITTER_DISABLED** = **0**

- **SUB_EMITTER_CONSTANT** = **1**

- **SUB_EMITTER_AT_END** = **2**

- **SUB_EMITTER_AT_COLLISION** = **3**

- **SUB_EMITTER_MAX** = **4** --- Represents the size of the :ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` enum.

----

.. _enum_ParticleProcessMaterial_CollisionMode:

.. _class_ParticleProcessMaterial_constant_COLLISION_DISABLED:

.. _class_ParticleProcessMaterial_constant_COLLISION_RIGID:

.. _class_ParticleProcessMaterial_constant_COLLISION_HIDE_ON_CONTACT:

.. _class_ParticleProcessMaterial_constant_COLLISION_MAX:

enum **CollisionMode**:

- **COLLISION_DISABLED** = **0** --- No collision for particles. Particles will go through :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` nodes.

- **COLLISION_RIGID** = **1** --- :ref:`RigidBody3D<class_RigidBody3D>`-style collision for particles using :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` nodes.

- **COLLISION_HIDE_ON_CONTACT** = **2** --- Hide particles instantly when colliding with a :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` node. This can be combined with a subemitter that uses the :ref:`COLLISION_RIGID<class_ParticleProcessMaterial_constant_COLLISION_RIGID>` collision mode to "replace" the parent particle with the subemitter on impact.

- **COLLISION_MAX** = **3** --- Represents the size of the :ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` enum.

Property Descriptions
---------------------

.. _class_ParticleProcessMaterial_property_angle_curve:

- :ref:`Texture2D<class_Texture2D>` **angle_curve**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Each particle's rotation will be animated along this :ref:`CurveTexture<class_CurveTexture>`.

----

.. _class_ParticleProcessMaterial_property_angle_max:

- :ref:`float<class_float>` **angle_max**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Maximum initial rotation applied to each particle, in degrees.

Only applied when :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>` or :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>` are ``true`` or the :ref:`BaseMaterial3D<class_BaseMaterial3D>` being used to draw the particle is using :ref:`BaseMaterial3D.BILLBOARD_PARTICLES<class_BaseMaterial3D_constant_BILLBOARD_PARTICLES>`.

----

.. _class_ParticleProcessMaterial_property_angle_min:

- :ref:`float<class_float>` **angle_min**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum equivalent of :ref:`angle_max<class_ParticleProcessMaterial_property_angle_max>`.

----

.. _class_ParticleProcessMaterial_property_angular_velocity_curve:

- :ref:`Texture2D<class_Texture2D>` **angular_velocity_curve**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Each particle's angular velocity (rotation speed) will vary along this :ref:`CurveTexture<class_CurveTexture>` over its lifetime.

----

.. _class_ParticleProcessMaterial_property_angular_velocity_max:

- :ref:`float<class_float>` **angular_velocity_max**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Maximum initial angular velocity (rotation speed) applied to each particle in *degrees* per second.

Only applied when :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>` or :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>` are ``true`` or the :ref:`BaseMaterial3D<class_BaseMaterial3D>` being used to draw the particle is using :ref:`BaseMaterial3D.BILLBOARD_PARTICLES<class_BaseMaterial3D_constant_BILLBOARD_PARTICLES>`.

----

.. _class_ParticleProcessMaterial_property_angular_velocity_min:

- :ref:`float<class_float>` **angular_velocity_min**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum equivalent of :ref:`angular_velocity_max<class_ParticleProcessMaterial_property_angular_velocity_max>`.

----

.. _class_ParticleProcessMaterial_property_anim_offset_curve:

- :ref:`Texture2D<class_Texture2D>` **anim_offset_curve**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Each particle's animation offset will vary along this :ref:`CurveTexture<class_CurveTexture>`.

----

.. _class_ParticleProcessMaterial_property_anim_offset_max:

- :ref:`float<class_float>` **anim_offset_max**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Maximum animation offset that corresponds to frame index in the texture. ``0`` is the first frame, ``1`` is the last one. See :ref:`CanvasItemMaterial.particles_animation<class_CanvasItemMaterial_property_particles_animation>`.

----

.. _class_ParticleProcessMaterial_property_anim_offset_min:

- :ref:`float<class_float>` **anim_offset_min**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum equivalent of :ref:`anim_offset_max<class_ParticleProcessMaterial_property_anim_offset_max>`.

----

.. _class_ParticleProcessMaterial_property_anim_speed_curve:

- :ref:`Texture2D<class_Texture2D>` **anim_speed_curve**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Each particle's animation speed will vary along this :ref:`CurveTexture<class_CurveTexture>`.

----

.. _class_ParticleProcessMaterial_property_anim_speed_max:

- :ref:`float<class_float>` **anim_speed_max**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Maximum particle animation speed. Animation speed of ``1`` means that the particles will make full ``0`` to ``1`` offset cycle during lifetime, ``2`` means ``2`` cycles etc.

With animation speed greater than ``1``, remember to enable :ref:`CanvasItemMaterial.particles_anim_loop<class_CanvasItemMaterial_property_particles_anim_loop>` property if you want the animation to repeat.

----

.. _class_ParticleProcessMaterial_property_anim_speed_min:

- :ref:`float<class_float>` **anim_speed_min**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum equivalent of :ref:`anim_speed_max<class_ParticleProcessMaterial_property_anim_speed_max>`.

----

.. _class_ParticleProcessMaterial_property_attractor_interaction_enabled:

- :ref:`bool<class_bool>` **attractor_interaction_enabled**

+-----------+------------------------------------------+
| *Default* | ``true``                                 |
+-----------+------------------------------------------+
| *Setter*  | set_attractor_interaction_enabled(value) |
+-----------+------------------------------------------+
| *Getter*  | is_attractor_interaction_enabled()       |
+-----------+------------------------------------------+

True if the interaction with particle attractors is enabled.

----

.. _class_ParticleProcessMaterial_property_collision_bounce:

- :ref:`float<class_float>` **collision_bounce**

+----------+-----------------------------+
| *Setter* | set_collision_bounce(value) |
+----------+-----------------------------+
| *Getter* | get_collision_bounce()      |
+----------+-----------------------------+

The particles' bounciness. Values range from ``0`` (no bounce) to ``1`` (full bounciness). Only effective if :ref:`collision_mode<class_ParticleProcessMaterial_property_collision_mode>` is :ref:`COLLISION_RIGID<class_ParticleProcessMaterial_constant_COLLISION_RIGID>`.

----

.. _class_ParticleProcessMaterial_property_collision_friction:

- :ref:`float<class_float>` **collision_friction**

+----------+-------------------------------+
| *Setter* | set_collision_friction(value) |
+----------+-------------------------------+
| *Getter* | get_collision_friction()      |
+----------+-------------------------------+

The particles' friction. Values range from ``0`` (frictionless) to ``1`` (maximum friction). Only effective if :ref:`collision_mode<class_ParticleProcessMaterial_property_collision_mode>` is :ref:`COLLISION_RIGID<class_ParticleProcessMaterial_constant_COLLISION_RIGID>`.

----

.. _class_ParticleProcessMaterial_property_collision_mode:

- :ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **collision_mode**

+-----------+---------------------------+
| *Default* | ``0``                     |
+-----------+---------------------------+
| *Setter*  | set_collision_mode(value) |
+-----------+---------------------------+
| *Getter*  | get_collision_mode()      |
+-----------+---------------------------+

The particles' collision mode.

\ **Note:** Particles can only collide with :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` nodes, not :ref:`PhysicsBody3D<class_PhysicsBody3D>` nodes. To make particles collide with various objects, you can add :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` nodes as children of :ref:`PhysicsBody3D<class_PhysicsBody3D>` nodes.

----

.. _class_ParticleProcessMaterial_property_collision_use_scale:

- :ref:`bool<class_bool>` **collision_use_scale**

+-----------+--------------------------------+
| *Default* | ``false``                      |
+-----------+--------------------------------+
| *Setter*  | set_collision_use_scale(value) |
+-----------+--------------------------------+
| *Getter*  | is_collision_using_scale()     |
+-----------+--------------------------------+

Should collision take scale into account.

----

.. _class_ParticleProcessMaterial_property_color:

- :ref:`Color<class_Color>` **color**

+-----------+-----------------------+
| *Default* | ``Color(1, 1, 1, 1)`` |
+-----------+-----------------------+
| *Setter*  | set_color(value)      |
+-----------+-----------------------+
| *Getter*  | get_color()           |
+-----------+-----------------------+

Each particle's initial color. If the :ref:`GPUParticles2D<class_GPUParticles2D>`'s ``texture`` is defined, it will be multiplied by this color.

\ **Note:** :ref:`color<class_ParticleProcessMaterial_property_color>` multiplies the particle mesh's vertex colors. To have a visible effect on a :ref:`BaseMaterial3D<class_BaseMaterial3D>`, :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *must* be ``true``. For a :ref:`ShaderMaterial<class_ShaderMaterial>`, ``ALBEDO *= COLOR.rgb;`` must be inserted in the shader's ``fragment()`` function. Otherwise, :ref:`color<class_ParticleProcessMaterial_property_color>` will have no visible effect.

----

.. _class_ParticleProcessMaterial_property_color_initial_ramp:

- :ref:`Texture2D<class_Texture2D>` **color_initial_ramp**

+----------+-------------------------------+
| *Setter* | set_color_initial_ramp(value) |
+----------+-------------------------------+
| *Getter* | get_color_initial_ramp()      |
+----------+-------------------------------+

Each particle's initial color will vary along this :ref:`GradientTexture1D<class_GradientTexture1D>` (multiplied with :ref:`color<class_ParticleProcessMaterial_property_color>`).

\ **Note:** :ref:`color_initial_ramp<class_ParticleProcessMaterial_property_color_initial_ramp>` multiplies the particle mesh's vertex colors. To have a visible effect on a :ref:`BaseMaterial3D<class_BaseMaterial3D>`, :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *must* be ``true``. For a :ref:`ShaderMaterial<class_ShaderMaterial>`, ``ALBEDO *= COLOR.rgb;`` must be inserted in the shader's ``fragment()`` function. Otherwise, :ref:`color_initial_ramp<class_ParticleProcessMaterial_property_color_initial_ramp>` will have no visible effect.

----

.. _class_ParticleProcessMaterial_property_color_ramp:

- :ref:`Texture2D<class_Texture2D>` **color_ramp**

+----------+-----------------------+
| *Setter* | set_color_ramp(value) |
+----------+-----------------------+
| *Getter* | get_color_ramp()      |
+----------+-----------------------+

Each particle's color will vary along this :ref:`GradientTexture1D<class_GradientTexture1D>` over its lifetime (multiplied with :ref:`color<class_ParticleProcessMaterial_property_color>`).

\ **Note:** :ref:`color_ramp<class_ParticleProcessMaterial_property_color_ramp>` multiplies the particle mesh's vertex colors. To have a visible effect on a :ref:`BaseMaterial3D<class_BaseMaterial3D>`, :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *must* be ``true``. For a :ref:`ShaderMaterial<class_ShaderMaterial>`, ``ALBEDO *= COLOR.rgb;`` must be inserted in the shader's ``fragment()`` function. Otherwise, :ref:`color_ramp<class_ParticleProcessMaterial_property_color_ramp>` will have no visible effect.

----

.. _class_ParticleProcessMaterial_property_damping_curve:

- :ref:`Texture2D<class_Texture2D>` **damping_curve**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Damping will vary along this :ref:`CurveTexture<class_CurveTexture>`.

----

.. _class_ParticleProcessMaterial_property_damping_max:

- :ref:`float<class_float>` **damping_max**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

The maximum rate at which particles lose velocity. For example value of ``100`` means that the particle will go from ``100`` velocity to ``0`` in ``1`` second.

----

.. _class_ParticleProcessMaterial_property_damping_min:

- :ref:`float<class_float>` **damping_min**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum equivalent of :ref:`damping_max<class_ParticleProcessMaterial_property_damping_max>`.

----

.. _class_ParticleProcessMaterial_property_direction:

- :ref:`Vector3<class_Vector3>` **direction**

+-----------+----------------------+
| *Default* | ``Vector3(1, 0, 0)`` |
+-----------+----------------------+
| *Setter*  | set_direction(value) |
+-----------+----------------------+
| *Getter*  | get_direction()      |
+-----------+----------------------+

Unit vector specifying the particles' emission direction.

----

.. _class_ParticleProcessMaterial_property_emission_box_extents:

- :ref:`Vector3<class_Vector3>` **emission_box_extents**

+----------+---------------------------------+
| *Setter* | set_emission_box_extents(value) |
+----------+---------------------------------+
| *Getter* | get_emission_box_extents()      |
+----------+---------------------------------+

The box's extents if ``emission_shape`` is set to :ref:`EMISSION_SHAPE_BOX<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_BOX>`.

----

.. _class_ParticleProcessMaterial_property_emission_color_texture:

- :ref:`Texture2D<class_Texture2D>` **emission_color_texture**

+----------+-----------------------------------+
| *Setter* | set_emission_color_texture(value) |
+----------+-----------------------------------+
| *Getter* | get_emission_color_texture()      |
+----------+-----------------------------------+

Particle color will be modulated by color determined by sampling this texture at the same point as the :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`.

\ **Note:** :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>` multiplies the particle mesh's vertex colors. To have a visible effect on a :ref:`BaseMaterial3D<class_BaseMaterial3D>`, :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *must* be ``true``. For a :ref:`ShaderMaterial<class_ShaderMaterial>`, ``ALBEDO *= COLOR.rgb;`` must be inserted in the shader's ``fragment()`` function. Otherwise, :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>` will have no visible effect.

----

.. _class_ParticleProcessMaterial_property_emission_normal_texture:

- :ref:`Texture2D<class_Texture2D>` **emission_normal_texture**

+----------+------------------------------------+
| *Setter* | set_emission_normal_texture(value) |
+----------+------------------------------------+
| *Getter* | get_emission_normal_texture()      |
+----------+------------------------------------+

Particle velocity and rotation will be set by sampling this texture at the same point as the :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`. Used only in :ref:`EMISSION_SHAPE_DIRECTED_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS>`. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.

----

.. _class_ParticleProcessMaterial_property_emission_point_count:

- :ref:`int<class_int>` **emission_point_count**

+----------+---------------------------------+
| *Setter* | set_emission_point_count(value) |
+----------+---------------------------------+
| *Getter* | get_emission_point_count()      |
+----------+---------------------------------+

The number of emission points if ``emission_shape`` is set to :ref:`EMISSION_SHAPE_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINTS>` or :ref:`EMISSION_SHAPE_DIRECTED_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS>`.

----

.. _class_ParticleProcessMaterial_property_emission_point_texture:

- :ref:`Texture2D<class_Texture2D>` **emission_point_texture**

+----------+-----------------------------------+
| *Setter* | set_emission_point_texture(value) |
+----------+-----------------------------------+
| *Getter* | get_emission_point_texture()      |
+----------+-----------------------------------+

Particles will be emitted at positions determined by sampling this texture at a random position. Used with :ref:`EMISSION_SHAPE_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINTS>` and :ref:`EMISSION_SHAPE_DIRECTED_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS>`. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.

----

.. _class_ParticleProcessMaterial_property_emission_ring_axis:

- :ref:`Vector3<class_Vector3>` **emission_ring_axis**

+----------+-------------------------------+
| *Setter* | set_emission_ring_axis(value) |
+----------+-------------------------------+
| *Getter* | get_emission_ring_axis()      |
+----------+-------------------------------+

The axis of the ring when using the emitter :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>`.

----

.. _class_ParticleProcessMaterial_property_emission_ring_height:

- :ref:`float<class_float>` **emission_ring_height**

+----------+---------------------------------+
| *Setter* | set_emission_ring_height(value) |
+----------+---------------------------------+
| *Getter* | get_emission_ring_height()      |
+----------+---------------------------------+

The height of the ring when using the emitter :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>`.

----

.. _class_ParticleProcessMaterial_property_emission_ring_inner_radius:

- :ref:`float<class_float>` **emission_ring_inner_radius**

+----------+---------------------------------------+
| *Setter* | set_emission_ring_inner_radius(value) |
+----------+---------------------------------------+
| *Getter* | get_emission_ring_inner_radius()      |
+----------+---------------------------------------+

The inner radius of the ring when using the emitter :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>`.

----

.. _class_ParticleProcessMaterial_property_emission_ring_radius:

- :ref:`float<class_float>` **emission_ring_radius**

+----------+---------------------------------+
| *Setter* | set_emission_ring_radius(value) |
+----------+---------------------------------+
| *Getter* | get_emission_ring_radius()      |
+----------+---------------------------------+

The radius of the ring when using the emitter :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>`.

----

.. _class_ParticleProcessMaterial_property_emission_shape:

- :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **emission_shape**

+-----------+---------------------------+
| *Default* | ``0``                     |
+-----------+---------------------------+
| *Setter*  | set_emission_shape(value) |
+-----------+---------------------------+
| *Getter*  | get_emission_shape()      |
+-----------+---------------------------+

Particles will be emitted inside this region. Use :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` constants for values.

----

.. _class_ParticleProcessMaterial_property_emission_sphere_radius:

- :ref:`float<class_float>` **emission_sphere_radius**

+----------+-----------------------------------+
| *Setter* | set_emission_sphere_radius(value) |
+----------+-----------------------------------+
| *Getter* | get_emission_sphere_radius()      |
+----------+-----------------------------------+

The sphere's radius if ``emission_shape`` is set to :ref:`EMISSION_SHAPE_SPHERE<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_SPHERE>`.

----

.. _class_ParticleProcessMaterial_property_flatness:

- :ref:`float<class_float>` **flatness**

+-----------+---------------------+
| *Default* | ``0.0``             |
+-----------+---------------------+
| *Setter*  | set_flatness(value) |
+-----------+---------------------+
| *Getter*  | get_flatness()      |
+-----------+---------------------+

Amount of :ref:`spread<class_ParticleProcessMaterial_property_spread>` along the Y axis.

----

.. _class_ParticleProcessMaterial_property_gravity:

- :ref:`Vector3<class_Vector3>` **gravity**

+-----------+-------------------------+
| *Default* | ``Vector3(0, -9.8, 0)`` |
+-----------+-------------------------+
| *Setter*  | set_gravity(value)      |
+-----------+-------------------------+
| *Getter*  | get_gravity()           |
+-----------+-------------------------+

Gravity applied to every particle.

----

.. _class_ParticleProcessMaterial_property_hue_variation_curve:

- :ref:`Texture2D<class_Texture2D>` **hue_variation_curve**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Each particle's hue will vary along this :ref:`CurveTexture<class_CurveTexture>`.

----

.. _class_ParticleProcessMaterial_property_hue_variation_max:

- :ref:`float<class_float>` **hue_variation_max**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Maximum initial hue variation applied to each particle. It will shift the particle color's hue.

----

.. _class_ParticleProcessMaterial_property_hue_variation_min:

- :ref:`float<class_float>` **hue_variation_min**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum equivalent of :ref:`hue_variation_max<class_ParticleProcessMaterial_property_hue_variation_max>`.

----

.. _class_ParticleProcessMaterial_property_initial_velocity_max:

- :ref:`float<class_float>` **initial_velocity_max**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Maximum initial velocity magnitude for each particle. Direction comes from :ref:`direction<class_ParticleProcessMaterial_property_direction>` and :ref:`spread<class_ParticleProcessMaterial_property_spread>`.

----

.. _class_ParticleProcessMaterial_property_initial_velocity_min:

- :ref:`float<class_float>` **initial_velocity_min**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum equivalent of :ref:`initial_velocity_max<class_ParticleProcessMaterial_property_initial_velocity_max>`.

----

.. _class_ParticleProcessMaterial_property_lifetime_randomness:

- :ref:`float<class_float>` **lifetime_randomness**

+-----------+--------------------------------+
| *Default* | ``0.0``                        |
+-----------+--------------------------------+
| *Setter*  | set_lifetime_randomness(value) |
+-----------+--------------------------------+
| *Getter*  | get_lifetime_randomness()      |
+-----------+--------------------------------+

Particle lifetime randomness ratio. The lifetime will be multiplied by a value interpolated between ``1.0`` and a random number less than one. For example a random ratio of ``0.4`` would scale the original lifetime between ``0.4-1.0`` of its original value.

----

.. _class_ParticleProcessMaterial_property_linear_accel_curve:

- :ref:`Texture2D<class_Texture2D>` **linear_accel_curve**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Each particle's linear acceleration will vary along this :ref:`CurveTexture<class_CurveTexture>`.

----

.. _class_ParticleProcessMaterial_property_linear_accel_max:

- :ref:`float<class_float>` **linear_accel_max**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Maximum linear acceleration applied to each particle in the direction of motion.

----

.. _class_ParticleProcessMaterial_property_linear_accel_min:

- :ref:`float<class_float>` **linear_accel_min**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum equivalent of :ref:`linear_accel_min<class_ParticleProcessMaterial_property_linear_accel_min>`.

----

.. _class_ParticleProcessMaterial_property_orbit_velocity_curve:

- :ref:`Texture2D<class_Texture2D>` **orbit_velocity_curve**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Each particle's orbital velocity will vary along this :ref:`CurveTexture<class_CurveTexture>`.

----

.. _class_ParticleProcessMaterial_property_orbit_velocity_max:

- :ref:`float<class_float>` **orbit_velocity_max**

+----------+----------------------+
| *Setter* | set_param_max(value) |
+----------+----------------------+
| *Getter* | get_param_max()      |
+----------+----------------------+

Maximum orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second.

Only available when :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>` is ``true``.

----

.. _class_ParticleProcessMaterial_property_orbit_velocity_min:

- :ref:`float<class_float>` **orbit_velocity_min**

+----------+----------------------+
| *Setter* | set_param_min(value) |
+----------+----------------------+
| *Getter* | get_param_min()      |
+----------+----------------------+

Minimum equivalent of :ref:`orbit_velocity_max<class_ParticleProcessMaterial_property_orbit_velocity_max>`.

----

.. _class_ParticleProcessMaterial_property_particle_flag_align_y:

- :ref:`bool<class_bool>` **particle_flag_align_y**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_particle_flag(value) |
+-----------+--------------------------+
| *Getter*  | get_particle_flag()      |
+-----------+--------------------------+

Align Y axis of particle with the direction of its velocity.

----

.. _class_ParticleProcessMaterial_property_particle_flag_disable_z:

- :ref:`bool<class_bool>` **particle_flag_disable_z**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_particle_flag(value) |
+-----------+--------------------------+
| *Getter*  | get_particle_flag()      |
+-----------+--------------------------+

If ``true``, particles will not move on the z axis.

----

.. _class_ParticleProcessMaterial_property_particle_flag_rotate_y:

- :ref:`bool<class_bool>` **particle_flag_rotate_y**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_particle_flag(value) |
+-----------+--------------------------+
| *Getter*  | get_particle_flag()      |
+-----------+--------------------------+

If ``true``, particles rotate around Y axis by :ref:`angle_min<class_ParticleProcessMaterial_property_angle_min>`.

----

.. _class_ParticleProcessMaterial_property_radial_accel_curve:

- :ref:`Texture2D<class_Texture2D>` **radial_accel_curve**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Each particle's radial acceleration will vary along this :ref:`CurveTexture<class_CurveTexture>`.

----

.. _class_ParticleProcessMaterial_property_radial_accel_max:

- :ref:`float<class_float>` **radial_accel_max**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Maximum radial acceleration applied to each particle. Makes particle accelerate away from the origin or towards it if negative.

----

.. _class_ParticleProcessMaterial_property_radial_accel_min:

- :ref:`float<class_float>` **radial_accel_min**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum equivalent of :ref:`radial_accel_max<class_ParticleProcessMaterial_property_radial_accel_max>`.

----

.. _class_ParticleProcessMaterial_property_scale_curve:

- :ref:`Texture2D<class_Texture2D>` **scale_curve**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Each particle's scale will vary along this :ref:`CurveTexture<class_CurveTexture>`. If a :ref:`CurveXYZTexture<class_CurveXYZTexture>` is supplied instead, the scale will be separated per-axis.

----

.. _class_ParticleProcessMaterial_property_scale_max:

- :ref:`float<class_float>` **scale_max**

+-----------+----------------------+
| *Default* | ``1.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Maximum initial scale applied to each particle.

----

.. _class_ParticleProcessMaterial_property_scale_min:

- :ref:`float<class_float>` **scale_min**

+-----------+----------------------+
| *Default* | ``1.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum equivalent of :ref:`scale_max<class_ParticleProcessMaterial_property_scale_max>`.

----

.. _class_ParticleProcessMaterial_property_spread:

- :ref:`float<class_float>` **spread**

+-----------+-------------------+
| *Default* | ``45.0``          |
+-----------+-------------------+
| *Setter*  | set_spread(value) |
+-----------+-------------------+
| *Getter*  | get_spread()      |
+-----------+-------------------+

Each particle's initial direction range from ``+spread`` to ``-spread`` degrees.

----

.. _class_ParticleProcessMaterial_property_sub_emitter_amount_at_end:

- :ref:`int<class_int>` **sub_emitter_amount_at_end**

+----------+--------------------------------------+
| *Setter* | set_sub_emitter_amount_at_end(value) |
+----------+--------------------------------------+
| *Getter* | get_sub_emitter_amount_at_end()      |
+----------+--------------------------------------+

----

.. _class_ParticleProcessMaterial_property_sub_emitter_frequency:

- :ref:`float<class_float>` **sub_emitter_frequency**

+----------+----------------------------------+
| *Setter* | set_sub_emitter_frequency(value) |
+----------+----------------------------------+
| *Getter* | get_sub_emitter_frequency()      |
+----------+----------------------------------+

----

.. _class_ParticleProcessMaterial_property_sub_emitter_keep_velocity:

- :ref:`bool<class_bool>` **sub_emitter_keep_velocity**

+-----------+--------------------------------------+
| *Default* | ``false``                            |
+-----------+--------------------------------------+
| *Setter*  | set_sub_emitter_keep_velocity(value) |
+-----------+--------------------------------------+
| *Getter*  | get_sub_emitter_keep_velocity()      |
+-----------+--------------------------------------+

----

.. _class_ParticleProcessMaterial_property_sub_emitter_mode:

- :ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **sub_emitter_mode**

+-----------+-----------------------------+
| *Default* | ``0``                       |
+-----------+-----------------------------+
| *Setter*  | set_sub_emitter_mode(value) |
+-----------+-----------------------------+
| *Getter*  | get_sub_emitter_mode()      |
+-----------+-----------------------------+

----

.. _class_ParticleProcessMaterial_property_tangential_accel_curve:

- :ref:`Texture2D<class_Texture2D>` **tangential_accel_curve**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Each particle's tangential acceleration will vary along this :ref:`CurveTexture<class_CurveTexture>`.

----

.. _class_ParticleProcessMaterial_property_tangential_accel_max:

- :ref:`float<class_float>` **tangential_accel_max**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Maximum tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.

----

.. _class_ParticleProcessMaterial_property_tangential_accel_min:

- :ref:`float<class_float>` **tangential_accel_min**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum equivalent of :ref:`tangential_accel_max<class_ParticleProcessMaterial_property_tangential_accel_max>`.

----

.. _class_ParticleProcessMaterial_property_turbulence_enabled:

- :ref:`bool<class_bool>` **turbulence_enabled**

+-----------+-------------------------------+
| *Default* | ``false``                     |
+-----------+-------------------------------+
| *Setter*  | set_turbulence_enabled(value) |
+-----------+-------------------------------+
| *Getter*  | get_turbulence_enabled()      |
+-----------+-------------------------------+

Enables and disables Turbulence for the particle system.

----

.. _class_ParticleProcessMaterial_property_turbulence_influence_max:

- :ref:`float<class_float>` **turbulence_influence_max**

+-----------+----------------------+
| *Default* | ``0.1``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Minimum turbulence influence on each particle.

 The actual amount of turbulence influence on each particle is calculated as a random value between :ref:`turbulence_influence_min<class_ParticleProcessMaterial_property_turbulence_influence_min>` and :ref:`turbulence_influence_max<class_ParticleProcessMaterial_property_turbulence_influence_max>` and multiplied by the amount of turbulence influence from :ref:`turbulence_influence_over_life<class_ParticleProcessMaterial_property_turbulence_influence_over_life>`.

----

.. _class_ParticleProcessMaterial_property_turbulence_influence_min:

- :ref:`float<class_float>` **turbulence_influence_min**

+-----------+----------------------+
| *Default* | ``0.1``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Maximum turbulence influence on each particle.

The actual amount of turbulence influence on each particle is calculated as a random value between :ref:`turbulence_influence_min<class_ParticleProcessMaterial_property_turbulence_influence_min>` and :ref:`turbulence_influence_max<class_ParticleProcessMaterial_property_turbulence_influence_max>` and multiplied by the amount of turbulence influence from :ref:`turbulence_influence_over_life<class_ParticleProcessMaterial_property_turbulence_influence_over_life>`.

----

.. _class_ParticleProcessMaterial_property_turbulence_influence_over_life:

- :ref:`Texture2D<class_Texture2D>` **turbulence_influence_over_life**

+----------+--------------------------+
| *Setter* | set_param_texture(value) |
+----------+--------------------------+
| *Getter* | get_param_texture()      |
+----------+--------------------------+

Each particle's amount of turbulence will be influenced along this :ref:`CurveTexture<class_CurveTexture>` over its life time.

----

.. _class_ParticleProcessMaterial_property_turbulence_initial_displacement_max:

- :ref:`float<class_float>` **turbulence_initial_displacement_max**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_max(value) |
+-----------+----------------------+
| *Getter*  | get_param_max()      |
+-----------+----------------------+

Maximum displacement of each particles spawn position by the turbulence.

The actual amount of displacement will be a factor of the underlying turbulence multiplied by a random value between :ref:`turbulence_initial_displacement_min<class_ParticleProcessMaterial_property_turbulence_initial_displacement_min>` and :ref:`turbulence_initial_displacement_max<class_ParticleProcessMaterial_property_turbulence_initial_displacement_max>`.

----

.. _class_ParticleProcessMaterial_property_turbulence_initial_displacement_min:

- :ref:`float<class_float>` **turbulence_initial_displacement_min**

+-----------+----------------------+
| *Default* | ``0.0``              |
+-----------+----------------------+
| *Setter*  | set_param_min(value) |
+-----------+----------------------+
| *Getter*  | get_param_min()      |
+-----------+----------------------+

Minimum displacement of each particles spawn position by the turbulence.

The actual amount of displacement will be a factor of the underlying turbulence multiplied by a random value between :ref:`turbulence_initial_displacement_min<class_ParticleProcessMaterial_property_turbulence_initial_displacement_min>` and :ref:`turbulence_initial_displacement_max<class_ParticleProcessMaterial_property_turbulence_initial_displacement_max>`.

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_scale:

- :ref:`float<class_float>` **turbulence_noise_scale**

+-----------+-----------------------------------+
| *Default* | ``9.0``                           |
+-----------+-----------------------------------+
| *Setter*  | set_turbulence_noise_scale(value) |
+-----------+-----------------------------------+
| *Getter*  | get_turbulence_noise_scale()      |
+-----------+-----------------------------------+

This value controls the overall scale/frequency of the turbulence noise pattern.

A small scale will result in smaller features with more detail while a high scale will result in smoother noise with larger features.

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_speed:

- :ref:`Vector3<class_Vector3>` **turbulence_noise_speed**

+-----------+-----------------------------------+
| *Default* | ``Vector3(0.5, 0.5, 0.5)``        |
+-----------+-----------------------------------+
| *Setter*  | set_turbulence_noise_speed(value) |
+-----------+-----------------------------------+
| *Getter*  | get_turbulence_noise_speed()      |
+-----------+-----------------------------------+

The movement speed of the turbulence pattern. This changes how quickly the noise changes over time.

A value of ``Vector3(0.0, 0.0, 0.0)`` will freeze the turbulence pattern in place.

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_speed_random:

- :ref:`float<class_float>` **turbulence_noise_speed_random**

+-----------+------------------------------------------+
| *Default* | ``0.0``                                  |
+-----------+------------------------------------------+
| *Setter*  | set_turbulence_noise_speed_random(value) |
+-----------+------------------------------------------+
| *Getter*  | get_turbulence_noise_speed_random()      |
+-----------+------------------------------------------+

Use to influence the noise speed in a random pattern. This helps to break up visible movement patterns.

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_strength:

- :ref:`float<class_float>` **turbulence_noise_strength**

+-----------+--------------------------------------+
| *Default* | ``1.0``                              |
+-----------+--------------------------------------+
| *Setter*  | set_turbulence_noise_strength(value) |
+-----------+--------------------------------------+
| *Getter*  | get_turbulence_noise_strength()      |
+-----------+--------------------------------------+

The turbulence noise strength. Increasing this will result in a stronger, more contrasting, noise pattern.

Method Descriptions
-------------------

.. _class_ParticleProcessMaterial_method_get_param_max:

- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

Returns the maximum value range for the given parameter.

----

.. _class_ParticleProcessMaterial_method_get_param_min:

- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

Returns the minimum value range for the given parameter.

----

.. _class_ParticleProcessMaterial_method_get_param_texture:

- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

Returns the :ref:`Texture2D<class_Texture2D>` used by the specified parameter.

----

.. _class_ParticleProcessMaterial_method_get_particle_flag:

- :ref:`bool<class_bool>` **get_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag **)** |const|

Returns ``true`` if the specified particle flag is enabled. See :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` for options.

----

.. _class_ParticleProcessMaterial_method_set_param_max:

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**

Sets the maximum value range for the given parameter.

----

.. _class_ParticleProcessMaterial_method_set_param_min:

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**

Sets the minimum value range for the given parameter.

----

.. _class_ParticleProcessMaterial_method_set_param_texture:

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**

Sets the :ref:`Texture2D<class_Texture2D>` for the specified :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>`.

----

.. _class_ParticleProcessMaterial_method_set_particle_flag:

- void **set_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag, :ref:`bool<class_bool>` enable **)**

If ``true``, enables the specified particle flag. See :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` for options.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
